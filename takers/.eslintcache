[{"/Users/waseehaque/Codes/McqApp/takers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/takers/src/components/App.js":"3","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js":"4","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js":"5","/Users/waseehaque/Codes/McqApp/takers/src/components/LeftPanel.js":"6","/Users/waseehaque/Codes/McqApp/takers/src/components/store.js":"7","/Users/waseehaque/Codes/McqApp/takers/src/components/LoginScreen.js":"8"},{"size":664,"mtime":1610554863241,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608538176884,"results":"11","hashOfConfig":"10"},{"size":2374,"mtime":1610560771697,"results":"12","hashOfConfig":"10"},{"size":712,"mtime":1610554863236,"results":"13","hashOfConfig":"10"},{"size":2460,"mtime":1610554863240,"results":"14","hashOfConfig":"10"},{"size":2368,"mtime":1610560868899,"results":"15","hashOfConfig":"10"},{"size":1083,"mtime":1610554863240,"results":"16","hashOfConfig":"10"},{"size":755,"mtime":1610817804621,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1n9867n",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/waseehaque/Codes/McqApp/takers/src/index.js",[],["40","41"],"/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/App.js",["42"],"import './App.css';\nimport ExamArea from './ExamArea';\nimport { Grid } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LeftPanel from './LeftPanel';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/*\n\nprops.exam_id = ID of the exam, passed on from index.js\n*/\n\nconst ADD_QUESTION = 'ADD_QUESTION';\nconst ADD_PROPERTY = 'ADD_PROPERTY';\n\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n\n  var answers = useSelector(state=>state.answers);\n  var property = useSelector(state=>state.property);\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n\n  /*The function that does the fetching from the API */\n  function getExam(examID) {\n\n    var url = \"https://mcq-app-6cef8-default-rtdb.firebaseio.com/test/exams/\" + examID + \".json\";\n\n    console.log(url, \"URL\")\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          dispatch({'type' : ADD_PROPERTY, 'payload' : result.property});\n          dispatch({'type' : ADD_QUESTION, 'payload' : result.questions});\n          setIsLoaded(true);\n        }\n      )\n  }\n\n  useEffect(() => {\n    getExam(props.exam_id);\n  }, []);\n\n\n  if (isLoaded) {\n\n    return (\n\n      <div className=\"App\">\n        <Grid container spacing={0} display=\"inline\">\n\n\n          {/**Old Top Panel */}\n          <Grid item xs={12}>\n            <AppBar style={{background: '#14213D', position: \"fixed\"}}>\n              <Toolbar><b>{property['title']}</b>\n                {/*CSS for the submit button is in App.css*/}\n                <button onClick={() => console.log(answers)} class=\"submit_button\">Submit</button>\n              </Toolbar>\n            </AppBar>\n          </Grid>\n\n\n         {/**Old Left Panel */}\n          <Grid item xs={0} md={4} >\n            <LeftPanel/>\n          </Grid>\n\n\n          <Grid item xs={12} md={8}>\n            <ExamArea/>\n          </Grid>\n\n        </Grid>\n      </div>\n    );\n  }\n\n  /*This gets rendered when the fetch method is still getting the response from the API call */\n  else {\n\n    return (\n\n      <div class=\"App loading\">\n        <CircularProgress style = {{color : \"#FCA311\"}}></CircularProgress>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js",["43","44"],"import McqQuestion from './McqQuestion'\nimport React, { useState, useEffect } from 'react';\nimport './ExamArea.css'\nimport { useSelector } from 'react-redux';\n\n/*\nThis is the file that pulls data from the API and renders questions on the screen.\n\nThings to do:\n\n*/\n\n\nfunction ExamArea() {\n\n        var question = useSelector(store => store.questions);\n\n        let mcqQuestionList = [];\n        for(var key in question) {\n            mcqQuestionList[mcqQuestionList.length] = <McqQuestion question = {question[key]} question_id = {key}/>;\n        }\n        \n        return (\n            <div className=\"ExamArea\">\n                {mcqQuestionList}\n            </div> \n        );\n    \n\n}\n\nexport default ExamArea;","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js",["45"],"import './McqQuestion.css'\nimport React, { useState } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\n\n/*\nThis is the question object. It takes in the question and returns the question card with the question\nand answers.\n\nThe props to be passed:\nprops.question = Question object, packed properly.\nprops.question_id =  ID of the question, pulled as \"key\" of the question object from the API, in the store.\n\nTo Do:\n\n\n*/\n\n\nfunction McqQuestion(props) {\n\n    const ADD_ANSWER = 'ADD_ANSWER';\n\n    var dispatch = useDispatch();\n\n    const [OptionSelectedStatus, setOptionSelectedStatus] = useState(\"\");\n\n    \n    function updateAnswer(a) {\n\n        dispatch(\n            {\n                \"type\" : ADD_ANSWER,\n                \"id\" : props.question_id,\n                \"answer\" : a\n            }\n        );\n\n        setOptionSelectedStatus(a);\n\n    }\n\n    /**\n     * Generates the answer \"component\", with the proper className.\n     * @param {String} choice The text for the answer choice\n     * @param {char} index One of a/b/c/d \n     */\n    function mcqChoiceGeneratingFunc(choice, index) {\n\n\n        var optionClassname = \"Option-unselected\";\n        var selectorClassname = \"selector-unselected\";\n\n        if (OptionSelectedStatus == index) {\n            optionClassname = \"Option-selected\";\n            selectorClassname = \"selector-selected\";\n        }\n\n        return (\n\n            <div onClick={() => updateAnswer(index)} class={optionClassname}>\n                <b class={selectorClassname}>{index}</b>\n                <div class=\"answer-option-text\">{choice}</div>\n            </div>\n\n        );\n    }\n\n    const choices = props.question.answer_choices;\n    const mcqChoices = [];\n\n    for (var index in choices) {\n        mcqChoices[mcqChoices.length] = mcqChoiceGeneratingFunc(choices[index], index);\n    }\n\n\n\n    return (\n\n        <Paper class=\"Question\">\n            <form class=\"Question-form\">\n                <div class=\"question-title\">\n                    <QuestionAnswerIcon style = {{color: \"#FCA311\", display: \"inline-block\"}}/>\n                    <span class=\"question-title-text\">{props.question.title}</span>\n                </div>\n                <div class=\"question-text\">{props.question.question_text}</div>\n                {mcqChoices}\n            </form>\n        </Paper>\n\n\n    );\n\n}\n\nexport default McqQuestion;",["46","47"],"/Users/waseehaque/Codes/McqApp/takers/src/components/LeftPanel.js",["48","49","50"],"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './LeftPanel.css'\nimport { List, Paper } from '@material-ui/core';\n\n\nfunction LeftPanel() {\n\n    var answers = useSelector(store => store.answers);\n    var questions = useSelector(store => store.questions);\n\n    const[selectedHeader, setSelectedHeader] = useState(\"question\");\n\n\n        /**\n     * The function that gets called when  left panel headings are clicked. It changes out the app properties in store and renders\n     * the required view.\n     *  @param value String with the value for what panel to show.\n     */\n    function leftPanelHeadingOnClick(e) {\n      setSelectedHeader(e.target.id);\n  }\n\n      /**\n     * This returns the view that would be seen in the left panel based on what header option is selected.\n     */\n    function leftpanelview() {\n      if(selectedHeader==\"question\") return(\n\n      <List>{quesList}</List>\n\n      );\n      else return(\n      <div>\n      </div>\n      );\n  }\n\n\n        /**\n     * Returns the appropriate classname for the element.\n     * @param {String} event ID of the header element\n     */\n    function headerClassname(event){\n      if(event==selectedHeader){\n          return \"leftpanel_heading_element_selected\"\n      }\n      else {\n          return \"leftpanel_heading_element\";\n      }\n  }\n\n\n  function QuestionListGeneratingFunc(ques, ques_id) {\n    var quickviewElementclass = \"answer_quickview_element_unanswered\";\n    if(ques_id in answers){quickviewElementclass = \"answer_quickview_element_answered\"}\n    return(\n    <div class={quickviewElementclass}>\n        <span>{ques.title}</span>\n    </div>\n        );\n}\n\nlet quesList = [];\n\nfor(var key in questions){\n    quesList[quesList.length] = QuestionListGeneratingFunc(questions[key], key);\n  }\n\n\n\n    return(\n        <Paper class=\"leftPanel\" style={{overflowY: 'scroll'}}>\n        <div class=\"leftpanel_quickview\" position=\"fixed\">\n          <div class=\"leftPanel_heading\">\n            <span id=\"question\" className={headerClassname(\"question\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Questions</span>\n              <span id=\"exam_options\" className={headerClassname(\"exam_options\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Results</span>\n          </div>\n\n          {leftpanelview()}\n\n        </div>\n      </Paper>\n    );\n\n}\n\nexport default LeftPanel;","/Users/waseehaque/Codes/McqApp/takers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/LoginScreen.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":50,"column":6,"nodeType":"57","endLine":50,"endColumn":8,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":2,"column":27,"nodeType":"61","messageId":"62","endLine":2,"endColumn":36},{"ruleId":"64","severity":1,"message":"65","line":55,"column":34,"nodeType":"66","messageId":"67","endLine":55,"endColumn":36},{"ruleId":"51","replacedBy":"68"},{"ruleId":"53","replacedBy":"69"},{"ruleId":"59","severity":1,"message":"63","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"64","severity":1,"message":"65","line":28,"column":24,"nodeType":"66","messageId":"67","endLine":28,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":45,"column":15,"nodeType":"66","messageId":"67","endLine":45,"endColumn":17},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getExam' and 'props.exam_id'. Either include them or remove the dependency array.","ArrayExpression",["72"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["70"],["71"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [getExam, props.exam_id]",{"range":"75","text":"76"},[1328,1330],"[getExam, props.exam_id]"]