[{"/Users/waseehaque/Codes/McqApp/takers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/takers/src/components/App.js":"3","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js":"4","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js":"5"},{"size":538,"mtime":1608720177680,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608538176884,"results":"8","hashOfConfig":"7"},{"size":3178,"mtime":1608741794257,"results":"9","hashOfConfig":"7"},{"size":969,"mtime":1608737306391,"results":"10","hashOfConfig":"7"},{"size":2135,"mtime":1608741761795,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1n9867n",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/waseehaque/Codes/McqApp/takers/src/index.js",[],["26","27"],"/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/App.js",["28","29"],"import './App.css';\nimport ExamArea from './ExamArea';\nimport { Grid } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\n/*\n\nprops.exam_id = ID of the exam, passed on from index.js\n*/\n\n\nfunction App(props) {\n\n\n  const [question, setQuestion] = useState([]);\n  const [answers, setanswers] = useState({});\n  const [examProperties, setExamProperties] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n\n\n\n  /*The function that does the fetching from the API */\n  function getExam(examID) {\n\n    var url = \"https://mcq-app-6cef8-default-rtdb.firebaseio.com/test/exams/\" + examID + \".json\";\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setQuestion(result.questions);\n          setExamProperties(result.property);\n          setIsLoaded(true);\n        }\n      )\n  }\n\n  useEffect(() => {\n    getExam(props.exam_id);\n  }, []);\n\n\n  const appbar_style = {\n    background: '#14213D',\n    position: \"fixed\",\n  }\n\n\n\n  function returnFromMcqQuestion(quesID, answer) {\n    var userAnswers = {};\n    userAnswers = { ...answers };\n    userAnswers[quesID] = answer;\n    setanswers(userAnswers);\n  }\n\n\n  var localQuestionArray = [];\n  var posInArray = 0;\n\n  /* This key here is the unique ID of the questions in the database. */\n  for(var key in question) {\n      localQuestionArray[posInArray] = question[key];\n      posInArray++;\n  }\n\n  function QuestionListGeneratingFunc(ques) {\n\n    var quickviewElementclass = \"answer_quickview_element_unanswered\";\n    if(ques.id in answers){quickviewElementclass = \"answer_quickview_element_answered\"}\n    return(<div class={quickviewElementclass}> {ques.title}</div>);\n\n}\n\n  const listQuestionLeftPanel = localQuestionArray.map((lquestion) =>\n  QuestionListGeneratingFunc(lquestion)\n  );\n\n\n  if (isLoaded) {\n\n    return (\n\n      <div className=\"App\">\n\n        <Grid container spacing={0} display=\"inline\">\n\n\n          {/**Old Top Panel */}\n          <Grid item xs={12}>\n            <AppBar style={appbar_style}>\n              <Toolbar><b>ECO181 Homework 3</b>\n                {/*CSS for the submit button is in App.css*/}\n                <button onClick={() => console.log(answers)} class=\"submit_button\">Submit</button>\n              </Toolbar>\n            </AppBar>\n          </Grid>\n\n\n         {/**Old Left Panel */}\n          <Grid item xs={4}>\n            <div class=\"leftPanel\">\n              <div class=\"answer_quickview\">\n                <h4 class=\"all_question\">Multiple Choice Questions</h4>\n                {listQuestionLeftPanel}\n              </div>\n            </div>\n          </Grid>\n\n\n          <Grid item xs={8}>\n            <ExamArea questions={question} returnF={returnFromMcqQuestion} />\n          </Grid>\n\n        </Grid>\n\n      </div>\n    );\n  }\n\n  /*This gets rendered when the fetch method is still getting the response from the API call */\n  else {\n    return (\n\n      <div class=\"App loading\">\n        <CircularProgress></CircularProgress>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js",["30","31"],"import McqQuestion from './McqQuestion'\nimport React, { useState, useEffect } from 'react';\nimport './ExamArea.css'\n\n/*\nThis is the file that pulls data from the API and renders questions on the screen.\n\nThe props to be passed:\nprops.questions = key value pair with all the questions.\nprops.returnF = Got from App.js passed on to McqQuestion.js, This will store the answers.\n\nThings to do:\n\n*/\n\n\nfunction ExamArea(props) {\n    \n    \n        var localQuestionArray = [];\n        var posInArray = 0;\n\n        for(var key in props.questions) {\n            localQuestionArray[posInArray] = props.questions[key];\n            posInArray++;\n        }\n\n        const mcqQuestionList = localQuestionArray.map((thisquestion) =>\n        <McqQuestion returnfunc={props.returnF} question = {thisquestion}/>\n        );\n        \n\n        return (\n            <div className=\"ExamArea\">\n                {mcqQuestionList}\n            </div> \n        );\n    \n\n}\n\nexport default ExamArea;","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js",["32","33"],"import './McqQuestion.css'\nimport React, { useState } from 'react';\nimport { Grid, Paper } from '@material-ui/core';\n\n/*\nThis is the question object. It takes in the question and the answer choices and returns the question card with the question\nand answers.\n\nThe props to be passed:\nprops.choices = string[] choices  which are the mcq choices.\nprops.question_text = string question_text which is the question.\nprops.question_id = ID of the question. It will be used to keep track of questions and answers.\nprops.returnfunc() = This gets filled with returnfunc(props.question_id, answer)\n\nTo Do:\n1. Figure out how to get the selected up to the parent components.\nThis was solved. OptionSelectedStatus right now has the letter stored.\n\n*/\n\n\nfunction McqQuestion(props) {\n\n    const [OptionSelectedStatus, setOptionSelectedStatus] = useState(\"\");\n\n    \n    function updateAnswer(a) {\n        props.returnfunc(props.question.id, a);\n        setOptionSelectedStatus(a)\n    }\n\n    function mcqChoiceGeneratingFunc(choice, index) {\n\n        var optionClassname = \"Option-unselected\";\n        var selectorClassname = \"selector-unselected\";\n\n        if (OptionSelectedStatus == String.fromCharCode(97 + index)) {\n            optionClassname = \"Option-selected\";\n            selectorClassname = \"selector-selected\";\n        }\n\n        return (\n\n            <div onClick={() => updateAnswer(String.fromCharCode(97 + index))} class={optionClassname}>\n                <b class={selectorClassname}>{String.fromCharCode(97 + index)}</b>\n                <div class=\"answer-option-text\">{choice}</div>\n            </div>\n\n        );\n    }\n\n    const choices = props.question.answer_choices;\n\n    const mcqChoices = choices.map((choice, index) =>\n\n        mcqChoiceGeneratingFunc(choice, index)\n\n    );\n\n\n    return (\n\n        <Paper class=\"Question\">\n            <form class=\"Question-form\">\n                <div class=\"question-title\">{props.question.title}</div>\n                <div class=\"question-text\">{props.question.question_text}</div>\n                {mcqChoices}\n            </form>\n        </Paper>\n\n\n    );\n\n}\n\nexport default McqQuestion;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":20,"column":10,"nodeType":"40","messageId":"41","endLine":20,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":43,"column":6,"nodeType":"44","endLine":43,"endColumn":8,"suggestions":"45"},{"ruleId":"38","severity":1,"message":"46","line":2,"column":17,"nodeType":"40","messageId":"41","endLine":2,"endColumn":25},{"ruleId":"38","severity":1,"message":"47","line":2,"column":27,"nodeType":"40","messageId":"41","endLine":2,"endColumn":36},{"ruleId":"38","severity":1,"message":"48","line":3,"column":10,"nodeType":"40","messageId":"41","endLine":3,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":37,"column":34,"nodeType":"51","messageId":"52","endLine":37,"endColumn":36},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'examProperties' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.exam_id'. Either include it or remove the dependency array.","ArrayExpression",["55"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Grid' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [props.exam_id]",{"range":"58","text":"59"},[1055,1057],"[props.exam_id]"]