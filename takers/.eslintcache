[{"/Users/waseehaque/Codes/McqApp/takers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/takers/src/components/store.js":"3","/Users/waseehaque/Codes/McqApp/takers/src/components/App.js":"4","/Users/waseehaque/Codes/McqApp/takers/src/components/api.js":"5","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js":"6","/Users/waseehaque/Codes/McqApp/takers/src/components/LeftPanel.js":"7","/Users/waseehaque/Codes/McqApp/takers/src/components/Spinner.js":"8","/Users/waseehaque/Codes/McqApp/takers/src/components/Modal.js":"9","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js":"10","/Users/waseehaque/Codes/McqApp/takers/src/components/Dashboard.js":"11","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamView.js":"12","/Users/waseehaque/Codes/McqApp/takers/src/components/Dashboard-exam.js":"13","/Users/waseehaque/Codes/McqApp/takers/src/components/ErrorPage.js":"14","/Users/waseehaque/Codes/McqApp/takers/src/components/LoginScreen.js":"15"},{"size":731,"mtime":1611746707156,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1608538176884,"results":"18","hashOfConfig":"17"},{"size":1185,"mtime":1611656494578,"results":"19","hashOfConfig":"17"},{"size":694,"mtime":1612099376541,"results":"20","hashOfConfig":"17"},{"size":524,"mtime":1611656494576,"results":"21","hashOfConfig":"17"},{"size":620,"mtime":1611746707150,"results":"22","hashOfConfig":"17"},{"size":3469,"mtime":1611746707153,"results":"23","hashOfConfig":"17"},{"size":245,"mtime":1611656494576,"results":"24","hashOfConfig":"17"},{"size":1034,"mtime":1611746707154,"results":"25","hashOfConfig":"17"},{"size":2256,"mtime":1611656494574,"results":"26","hashOfConfig":"17"},{"size":2821,"mtime":1611746707147,"results":"27","hashOfConfig":"17"},{"size":2810,"mtime":1612099265365,"results":"28","hashOfConfig":"17"},{"size":979,"mtime":1611656494566,"results":"29","hashOfConfig":"17"},{"size":620,"mtime":1612099350225,"results":"30","hashOfConfig":"17"},{"size":2388,"mtime":1611656494573,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1n9867n",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"/Users/waseehaque/Codes/McqApp/takers/src/index.js",[],["71","72"],"/Users/waseehaque/Codes/McqApp/takers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/App.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/api.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/ExamArea.js",["73","74"],"import McqQuestion from \"./McqQuestion\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./ExamArea.css\";\nimport { useSelector } from \"react-redux\";\n\n/*\nThis is the file that pulls data from the API and renders questions on the screen.\n\nThings to do:\n\n*/\n\nfunction ExamArea() {\n  var question = useSelector((store) => store.questions);\n\n  let mcqQuestionList = [];\n  for (var key in question) {\n    mcqQuestionList[mcqQuestionList.length] = (\n      <McqQuestion question={question[key]} question_id={key} />\n    );\n  }\n\n  return <div className='ExamArea'>{mcqQuestionList}</div>;\n}\n\nexport default ExamArea;\n","/Users/waseehaque/Codes/McqApp/takers/src/components/LeftPanel.js",["75","76","77","78","79"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./LeftPanel.css\";\nimport { List, Paper } from \"@material-ui/core\";\n\nfunction LeftPanel() {\n  var answers = useSelector((store) => store.answers);\n  var questions = useSelector((store) => store.questions);\n  const answersLength = Object.keys(answers).length;\n  const questionsLength = Object.keys(questions).length;\n\n  const [selectedHeader, setSelectedHeader] = useState(\"question\");\n\n  /**\n   * The function that gets called when  left panel headings are clicked. It changes out the app properties in store and renders\n   * the required view.\n   *  @param value String with the value for what panel to show.\n   */\n  function leftPanelHeadingOnClick(e) {\n    setSelectedHeader(e.target.id);\n  }\n\n  /**\n   * This returns the view that would be seen in the left panel based on what header option is selected.\n   */\n  function leftpanelview() {\n    if (selectedHeader == \"question\") return <List>{quesList}</List>;\n    else return <div></div>;\n  }\n\n  /**\n   * Returns the appropriate classname for the element.\n   * @param {String} event ID of the header element\n   */\n  function headerClassname(event) {\n    if (event == selectedHeader) {\n      return \"leftpanel_heading_element_selected\";\n    } else {\n      return \"leftpanel_heading_element\";\n    }\n  }\n\n  function QuestionListGeneratingFunc(ques, ques_id) {\n    var quickviewElementclass = \"answer_quickview_element_unanswered\";\n    let unanswered = null;\n    if (ques_id in answers) {\n      quickviewElementclass = \"answer_quickview_element_answered\";\n    } else {\n      unanswered = (\n        <p className='unanswered'>\n          <i className='fa fa-circle icon'></i>\n          <span>Unanswered</span>\n        </p>\n      );\n    }\n\n    return (\n      <div class={quickviewElementclass}>\n        <div>\n          <i className='fa fa-book icon'></i>\n          {ques.title}\n        </div>\n\n        {/* Dot for unanswered */}\n        {unanswered}\n      </div>\n    );\n  }\n\n  let quesList = [];\n\n  for (var key in questions) {\n    quesList[quesList.length] = QuestionListGeneratingFunc(questions[key], key);\n  }\n\n  return (\n    <Paper class='leftPanel'>\n      <div class='leftpanel_quickview' position='fixed'>\n        <div class='leftPanel_heading'>\n          <h3>Assigned Questions</h3>\n\n          {/* Badge  */}\n          <p className='badge'>\n            {answersLength === questionsLength ? (\n              <span>All Answered</span>\n            ) : (\n              <div>\n                <i className='fa fa-circle'></i>\n                <span>\n                  {answersLength}/{questionsLength}\n                </span>\n              </div>\n            )}\n          </p>\n        </div>\n\n        {leftpanelview()}\n      </div>\n    </Paper>\n  );\n}\n\nexport default LeftPanel;\n\n/*\n\n\n<Paper class='leftPanel' style={{ overflowY: \"scroll\" }}>\n      <div class='leftpanel_quickview' position='fixed'>\n        <div class='leftPanel_heading'>\n          <span\n            id='question'\n            className={headerClassname(\"question\")}\n            onClick={(e) => leftPanelHeadingOnClick(e)}\n          >\n            Questions\n          </span>\n          <span\n            id='exam_options'\n            className={headerClassname(\"exam_options\")}\n            onClick={(e) => leftPanelHeadingOnClick(e)}\n          >\n            Results\n          </span>\n        </div>\n\n        {leftpanelview()}\n      </div>\n    </Paper>\n\n\n*/\n","/Users/waseehaque/Codes/McqApp/takers/src/components/Spinner.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/Modal.js",["80","81"],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\";\n\nconst Modal = (props) => (\n  <div className='backdrop'>\n    <div className='Modal'>\n      <div className='Success'>\n        <div className='btn-box'>\n          <button onClick={props.close}>\n            <i className='fa fa-times'></i>\n            <span>Close</span>\n          </button>\n        </div>\n        <div className='content'>{props.children}</div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Modal;\n\n/*\n\n1. Modal for anything\n2. Call it from any component \n3. No need to touch this file\n\nSample for using it on any component \n------------------------------------\n1. set state\nconst [showModal, setShowModal] = useState(false);\n  const toggleModal = () =>\n    showModal ? setShowModal(false) : setShowModal(true);\n\n2. Keep this anywhere you return & change the inside element on your wish\n\n{showModal && (\n  <Modal close={toggleModal}>\n    <h1>Are you sure?</h1>\n    <button className='submit_button'>YESSSSSSSSSSSS</button>\n  </Modal>\n)}\n\n*/\n","/Users/waseehaque/Codes/McqApp/takers/src/components/McqQuestion.js",["82"],"import \"./McqQuestion.css\";\nimport React, { useState } from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\n\n/*\nThis is the question object. It takes in the question and returns the question card with the question\nand answers.\n\nThe props to be passed:\nprops.question = Question object, packed properly.\nprops.question_id =  ID of the question, pulled as \"key\" of the question object from the API, in the store.\n\nTo Do:\n\n\n*/\n\nfunction McqQuestion(props) {\n  const ADD_ANSWER = \"ADD_ANSWER\";\n\n  var dispatch = useDispatch();\n\n  const [OptionSelectedStatus, setOptionSelectedStatus] = useState(\"\");\n\n  function updateAnswer(a) {\n    dispatch({\n      type: ADD_ANSWER,\n      id: props.question_id,\n      answer: a,\n    });\n\n    setOptionSelectedStatus(a);\n  }\n\n  /**\n   * Generates the answer \"component\", with the proper className.\n   * @param {String} choice The text for the answer choice\n   * @param {char} index One of a/b/c/d\n   */\n  function mcqChoiceGeneratingFunc(choice, index) {\n    var optionClassname = \"Option-unselected\";\n    var selectorClassname = \"selector-unselected\";\n\n    if (OptionSelectedStatus == index) {\n      optionClassname = \"Option-selected\";\n      selectorClassname = \"selector-selected\";\n    }\n\n    return (\n      <div onClick={() => updateAnswer(index)} class={optionClassname}>\n        <p class={selectorClassname}>{index}</p>\n        <div class='answer-option-text'>\n          <p>{choice}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const choices = props.question.answer_choices;\n  const mcqChoices = [];\n\n  for (var index in choices) {\n    mcqChoices[mcqChoices.length] = mcqChoiceGeneratingFunc(\n      choices[index],\n      index\n    );\n  }\n\n  return (\n    <Paper class='Question'>\n      <form class='Question-form'>\n        <h3 class='question-title'>\n          <QuestionAnswerIcon\n            style={{ color: \"#FCA311\", display: \"inline-block\" }}\n          />\n          <span class='question-title-text'>{props.question.title}</span>\n        </h3>\n        <div class='question-text'>{props.question.question_text}</div>\n        {mcqChoices}\n      </form>\n    </Paper>\n  );\n}\n\nexport default McqQuestion;\n","/Users/waseehaque/Codes/McqApp/takers/src/components/Dashboard.js",["83","84","85"],"import { AppBar, Toolbar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Dashboard.css\";\nimport Exam from \"./Dashboard-exam\";\n\nfunction Dashboard() {\n  const [toggleDrawer, setToggleDrawer] = useState(true);\n  const toggleDrawerHandler = () =>\n    toggleDrawer ? setToggleDrawer(false) : setToggleDrawer(true);\n  // const toggleOpenDrawerHandler = () =>\n  //   toggleDrawer ? setToggleDrawer(false) : null;\n\n  console.log(toggleDrawer);\n\n  let pushLeft;\n  toggleDrawer ? (pushLeft = { left: \"0rem\" }) : (pushLeft = { left: \"-100%\" });\n\n  return (\n    <div className='Dashboard'>\n      {/* Drawer *********************/}\n      <div className='Dashboard-drawer' style={pushLeft}>\n        <div>\n          <button className='toggle-close' onClick={toggleDrawerHandler}>\n            <i className='fa fa-times'></i>\n            <span className='sr-only'>Close Drawer</span>\n          </button>\n          <div className='welcome'>\n            <img\n              className='user-avatar'\n              src='https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png'\n              alt='User Avatar'\n            />\n\n            <p>\n              Welcome, <br />\n              <span>Anonymous Student</span>\n            </p>\n          </div>\n          <div className='tabs'>\n            <i className='fa fa-user-circle'></i>\n            <span>Profile</span>\n          </div>\n          <div className='tabs active'>\n            <i className='fa fa-book'></i>\n            <span>Exams</span>\n          </div>\n\n          <div className='tabs'>\n            <i className='fa fa-cog'></i>\n            <span>Settings</span>\n          </div>\n        </div>\n\n        <button className='logout'>Log out</button>\n      </div>\n\n      {/* Exam boards ******************/}\n      <div className='Dashboard-content'>\n        <div className='header'>\n          <button className='toggle-menu' onClick={toggleDrawerHandler}>\n            <i className='fa fa-bars'></i>\n            <span className='sr-only'>Toggle Drawer Menu</span>\n          </button>\n\n          <div className='dashboard-content-form'>\n            <input type='text' placeholder='Input Exam ID' />\n            <button className='create-new'>\n              <i className='fa fa-plus-square'></i>\n              <span>New Exam</span>\n            </button>\n          </div>\n        </div>\n\n        {/* All the exams *********/}\n        <div className='Dashboard-boards'>\n          <Exam />\n          <Exam />\n          <Exam />\n          <Exam />\n          <Exam />\n          <Exam />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n\n/*\n1. fixed the drawer to the left with a width of 22.5rem/225px.\n2. The Exam will come from Dashboard-exam.js which will get data from the api\n*/\n","/Users/waseehaque/Codes/McqApp/takers/src/components/ExamView.js",["86","87","88","89","90"],"import \"./ExamView.css\";\nimport ExamArea from \"./ExamArea\";\nimport { Grid } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport LeftPanel from \"./LeftPanel\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getExam } from \"./api\";\nimport Spinner from \"./Spinner\";\nimport Modal from \"./Modal\";\n\n/*\n\nprops.exam_id = ID of the exam, passed on from index.js\n*/\n\nconst ADD_QUESTION = \"ADD_QUESTION\";\nconst ADD_PROPERTY = \"ADD_PROPERTY\";\n\nfunction ExamView(props) {\n  var property = useSelector((state) => state.property);\n\n  const dispatch = useDispatch();\n\n  setInterval(checkFocus, 200);\n\n  function checkFocus() {\n    if (document.hasFocus() == false) {\n      //Do some checking and raise a red flag if this runs during an exam.\n    }\n  }\n\n  const [showModal, setShowModal] = useState(false);\n  const toggleModal = () =>\n    showModal ? setShowModal(false) : setShowModal(true);\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  async function onLoadFunc(examID) {\n    var exam = await getExam(examID);\n    console.log(exam);\n    dispatch({ type: ADD_PROPERTY, payload: exam.property });\n    dispatch({ type: ADD_QUESTION, payload: exam.questions });\n    setIsLoaded(true);\n  }\n\n  useEffect(() => {\n    onLoadFunc(props.exam_id);\n  }, []);\n\n  if (isLoaded) {\n    return (\n      <div className='App' id='App'>\n        {showModal && (\n          <Modal close={toggleModal}>\n            <h1>Are you sure?</h1>\n            <button className='submit_button'>YESSSSSSSSSSSS</button>\n          </Modal>\n        )}\n\n        <Grid container spacing={0} display='inline'>\n          {/**Header  ***********/}\n          <Grid item xs={12}>\n            <header className='header'>\n              <div className='container'>\n                <p>\n                  <i className='fa fa-book'></i>\n                  <b>{property[\"title\"]}</b>\n                </p>\n\n                <button onClick={toggleModal} class='submit_button'>\n                  Submit Test\n                </button>\n              </div>\n            </header>\n          </Grid>\n\n          {/**Old Left Panel */}\n          <Grid item xs={0} md={4}>\n            <LeftPanel />\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <div className='container'>\n              <ExamArea />\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  } else {\n    /*This gets rendered when the fetch method is still getting the response from the API call */\n    return (\n      <div class='App loading'>\n        <Spinner />\n      </div>\n    );\n  }\n}\n\nexport default ExamView;\n\n/*\n1. Replace AppBar with Header tag\n2. Added Spinner\n\n*/\n","/Users/waseehaque/Codes/McqApp/takers/src/components/Dashboard-exam.js",["91","92","93","94","95","96"],"import { AppBar, Toolbar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Dashboard-exam.css\";\n\nfunction DashboardExam() {\n  const viewAnswer = () => console.log(\"view Answer\");\n\n  return (\n    <div className='Dashboard-board'>\n      <div className='top'>\n        <div className='board-content'>\n          <h3>ECO 486: Homework Quiz 5</h3>\n          <p>\n            Created: <span>16 January, 2021</span>\n          </p>\n          <p>40 Multiple Choice Questions</p>\n        </div>\n        {/* Right side */}\n        <p className='answer-status'>\n          <i className='fa fa-circle'></i>\n          <span>38/40</span>\n        </p>\n      </div>\n\n      <div className='board-settings'>\n        <button className='button' onClick={viewAnswer}>\n          <i className='fa fa-file'></i>\n          <span>View Answers</span>\n        </button>\n      </div>\n    </div>\n  );\n  {\n    /* single board/box ends */\n  }\n}\n\nexport default DashboardExam;\n","/Users/waseehaque/Codes/McqApp/takers/src/components/ErrorPage.js",[],"/Users/waseehaque/Codes/McqApp/takers/src/components/LoginScreen.js",["97","98"],"import React, { useState } from \"react\";\nimport \"./LoginScreen.css\";\nimport InputBase from \"@material-ui/core/InputBase\";\n//import { login, register } from \"./api\";\nimport { useSelector } from \"react-redux\";\n\n/*\n1. Moved the input elements into a form.\n2. className='LoginPage' has 100% width & 100% height, display grid to place the form always centered.\n3. all the elements inside the form has some margin & padding.\n*/\nfunction LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailCN, setEmailCN] = useState(\"id_text\");\n  const [pwCN, setPWCN] = useState(\"id_text\");\n\n  const reduxstore = useSelector((store) => store.session);\n\n  async function processLogin() {\n    //Do Some email validation\n    //var user = await login(email, password);\n    //console.log(user, \"User from login page\");\n    console.log(\"Login button pressed!\");\n  }\n\n  async function processRegister() {\n    //Do some email validation\n    //var user = await register(email, password);\n    console.log(reduxstore.session_token);\n  }\n\n  return (\n    <div className='LoginPage'>\n      <form className='LoginForm'>\n        <img\n          className='LoginForm-avatar'\n          src='https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png'\n          alt='Login Avatar'\n        />\n\n        {/* Input elements */}\n        <InputBase\n          className={emailCN}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder='Username'\n          onFocus={(e) => setEmailCN(\"id_text_selected\")}\n          onBlur={(e) => setEmailCN(\"id_text\")}\n        />\n        <InputBase\n          className={pwCN}\n          type='password'\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder='Password'\n          onFocus={(e) => setPWCN(\"id_text_selected\")}\n          onBlur={(e) => setPWCN(\"id_text\")}\n        />\n\n        <button\n          className='button'\n          type='button'\n          onClick={() => {\n            processLogin();\n          }}\n        >\n          Login\n        </button>\n\n        <div className='LoginForm-bar'></div>\n\n        <button\n          className='button'\n          type='button'\n          onClick={() => {\n            processRegister();\n          }}\n        >\n          Register\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginPage;\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":2,"column":17,"nodeType":"105","messageId":"106","endLine":2,"endColumn":25},{"ruleId":"103","severity":1,"message":"107","line":2,"column":27,"nodeType":"105","messageId":"106","endLine":2,"endColumn":36},{"ruleId":"103","severity":1,"message":"107","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"108","line":19,"column":12,"nodeType":"105","messageId":"106","endLine":19,"endColumn":35},{"ruleId":"109","severity":1,"message":"110","line":27,"column":24,"nodeType":"111","messageId":"112","endLine":27,"endColumn":26},{"ruleId":"103","severity":1,"message":"113","line":35,"column":12,"nodeType":"105","messageId":"106","endLine":35,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":36,"column":15,"nodeType":"111","messageId":"112","endLine":36,"endColumn":17},{"ruleId":"103","severity":1,"message":"107","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":1,"column":28,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"109","severity":1,"message":"110","line":46,"column":30,"nodeType":"111","messageId":"112","endLine":46,"endColumn":32},{"ruleId":"103","severity":1,"message":"114","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":16},{"ruleId":"103","severity":1,"message":"115","line":1,"column":18,"nodeType":"105","messageId":"106","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"107","line":2,"column":17,"nodeType":"105","messageId":"106","endLine":2,"endColumn":26},{"ruleId":"103","severity":1,"message":"116","line":5,"column":10,"nodeType":"105","messageId":"106","endLine":5,"endColumn":26},{"ruleId":"103","severity":1,"message":"114","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":14},{"ruleId":"103","severity":1,"message":"115","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":15},{"ruleId":"109","severity":1,"message":"110","line":30,"column":29,"nodeType":"111","messageId":"112","endLine":30,"endColumn":31},{"ruleId":"117","severity":1,"message":"118","line":51,"column":6,"nodeType":"119","endLine":51,"endColumn":8,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"114","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":16},{"ruleId":"103","severity":1,"message":"115","line":1,"column":18,"nodeType":"105","messageId":"106","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"107","line":2,"column":17,"nodeType":"105","messageId":"106","endLine":2,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":2,"column":28,"nodeType":"105","messageId":"106","endLine":2,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":33,"column":3,"nodeType":"123","messageId":"124","endLine":35,"endColumn":4},{"ruleId":"125","severity":1,"message":"126","line":33,"column":3,"nodeType":"123","messageId":"127","endLine":35,"endColumn":4},{"ruleId":"103","severity":1,"message":"128","line":13,"column":10,"nodeType":"105","messageId":"106","endLine":13,"endColumn":15},{"ruleId":"103","severity":1,"message":"129","line":14,"column":10,"nodeType":"105","messageId":"106","endLine":14,"endColumn":18},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'leftPanelHeadingOnClick' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'headerClassname' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'CircularProgress' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onLoadFunc' and 'props.exam_id'. Either include them or remove the dependency array.","ArrayExpression",["132"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'email' is assigned a value but never used.","'password' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},"Update the dependencies array to be: [onLoadFunc, props.exam_id]",{"range":"135","text":"136"},[1437,1439],"[onLoadFunc, props.exam_id]"]