[{"/Users/waseehaque/Codes/McqApp/makers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard.js":"3","/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js":"4","/Users/waseehaque/Codes/McqApp/makers/src/components/App.js":"5","/Users/waseehaque/Codes/McqApp/makers/src/components/api.js":"6","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js":"7","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js":"8","/Users/waseehaque/Codes/McqApp/makers/src/components/LeftPanel.js":"9","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js":"10","/Users/waseehaque/Codes/McqApp/makers/src/components/QuestionEditor.js":"11","/Users/waseehaque/Codes/McqApp/makers/src/components/LoginPage.js":"12"},{"size":1126,"mtime":1611394219124,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608538176884,"results":"15","hashOfConfig":"14"},{"size":2625,"mtime":1611390393890,"results":"16","hashOfConfig":"14"},{"size":400,"mtime":1610554863234,"results":"17","hashOfConfig":"14"},{"size":1934,"mtime":1611390393889,"results":"18","hashOfConfig":"14"},{"size":2323,"mtime":1611399240924,"results":"19","hashOfConfig":"14"},{"size":1653,"mtime":1611395240606,"results":"20","hashOfConfig":"14"},{"size":1009,"mtime":1611390393891,"results":"21","hashOfConfig":"14"},{"size":2872,"mtime":1611390393893,"results":"22","hashOfConfig":"14"},{"size":8753,"mtime":1611390393895,"results":"23","hashOfConfig":"14"},{"size":1664,"mtime":1611040851317,"results":"24","hashOfConfig":"14"},{"size":2205,"mtime":1611394778939,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"ed4oe2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},"/Users/waseehaque/Codes/McqApp/makers/src/index.js",["58","59"],"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './components/store'\nimport \"font-awesome/css/font-awesome.min.css\";\nimport {firebaseInit} from './components/api'\n\n\n\nimport LoginPage from \"./components/LoginPage\";\n\n\n//Test Imports\nimport TestComponent from \"./components/testComponent\";\nvar test = true;\n\n\nif (test) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <LoginPage></LoginPage>\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n} else {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App exam_id='exam0' />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();",["60","61"],"/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard.js",["62","63","64","65"],"/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js",["66","67","68"],"import React, { useState, useEffect, useContext } from 'react';\n\nfunction TestComponent(props) {\n\n\n    return(\n        <div>\n            <input type=\"email\" placeholder=\"Email ID\" id=\"email\"></input>\n            <input type=\"password\" placeholder=\"Password\" id=\"password\"></input>\n            <button type=\"submit\" value=\"submit\">Submit</button>\n        </div>\n    );\n}\n\nexport default TestComponent;","/Users/waseehaque/Codes/McqApp/makers/src/components/App.js",["69","70"],"import './App.css';\nimport ExamArea from './ExamArea';\nimport { Grid, Hidden } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useDispatch } from 'react-redux';\nimport LeftPanel from './LeftPanel'\nimport {SubmitTest, getExamID} from \"./api\";\n\nconst ADD_ID = 'ADD_ID';\n\nfunction App() {\n\n  const[isLoaded, setIsLoaded] = useState(false);\n  const[examID, setExamID] = useState(\"\");\n\n\n  async function onInitialLoad(){\n    \n    var id = await getExamID();\n    setExamID(id);\n    dispatch(addExamIDAction(id));\n    setIsLoaded(true);\n\n  }\n\n  useEffect(()=>onInitialLoad(), []);\n\n  const dispatch = useDispatch();\n\n  function addExamIDAction(value) {\n\n    return(\n      {\n        'type' : ADD_ID,\n        'id' : \"examID\",\n        'value' : value\n      }\n    )\n    \n  }\n\n\n/**\n * Calls submittest from API.js\n * Adds a syntheic wait to make the user thing something is actually going on.\n */\n  function Finished() {\n    SubmitTest();\n  }\n\n\n    if(isLoaded) return (\n\n      <div class=\"App\">\n        <Grid container spacing={0} display=\"inline\">\n\n          {/**Old Top Panel */}\n          <Grid item xs={12}>\n            <AppBar style={{background: '#14213D', position: \"fixed\"}}>\n              <Toolbar>\n                <b>\n                {\"Exam ID : \" + examID}\n                </b>\n                {/*CSS for the submit button is in App.css*/}\n                <button onClick={() => Finished(3)} class=\"submit_button\">Publish Test</button>\n              </Toolbar>\n            </AppBar>\n          </Grid>\n\n\n         {/**Old Left Panel */}\n          <Grid item xs={0} md={4}>\n              <LeftPanel/>\n          </Grid>\n\n\n          <Grid item xs={12} md={8}>\n            <ExamArea/>\n          </Grid>\n\n        </Grid>\n\n      </div>\n    );\n\n    else return(\n    \"Loading\"\n    );\n  }\n\n\nexport default App;","/Users/waseehaque/Codes/McqApp/makers/src/components/api.js",["71"],"/Users/waseehaque/Codes/McqApp/makers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/LeftPanel.js",["72","73","74"],"import React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport Paper from '@material-ui/core/Paper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './LeftPanel.css';\nimport { InputBase, TextField } from '@material-ui/core';\n\nfunction LeftPanel() {\n\n    const dispatch = useDispatch();\n\n    const[selectedHeader, setSelectedHeader] = useState(\"question\");\n    /**\n     * This returns the view that would be seen in the left panel based on what header option is selected.\n     */\n    function leftpanelview() {\n        if(selectedHeader==\"question\") return(\n\n        <List>{listQuestionLeftPanel}</List>\n\n        );\n        else return(\n        <div>\n            <InputBase className=\"leftpanel_title_changer\" onChange={(e)=> titleOnChange(e.target.value)} placeholder=\"Exam Title\" style={{borderStyle: \"solid\", borderWidth: \"1px\", borderColor: \"#d9d9d9\"}}></InputBase>\n        </div>\n        );\n    }\n\n    function addTitleAction(target){\n        return {\n            type : \"ADD_TITLE\",\n            id : \"title\",\n            value : target\n        }\n    }\n\n    function titleOnChange(value){\n        dispatch(addTitleAction(value));\n    }\n\n    /**\n     * The function that gets called when  left panel headings are clicked. It changes out the app properties in store and renders\n     * the required view.\n     *  @param value String with the value for what panel to show.\n     */\n    function leftPanelHeadingOnClick(e) {\n        setSelectedHeader(e.target.id);\n    }\n\n    /**\n     * Returns the appropriate classname for the element.\n     * @param {String} event ID of the header element\n     */\n    function headerClassname(event){\n        if(event==selectedHeader){\n            return \"leftpanel_heading_element_selected\"\n        }\n        else {\n            return \"leftpanel_heading_element\";\n        }\n    }\n    \n\n    function QuestionListGeneratingFunc(ques) {\n        var quickviewElementclass = \"answer_quickview_element_answered\";\n        return(<li class={quickviewElementclass}> {ques.title}</li>);\n    }\n\n    \n    let Mquestion = useSelector(store => store.questions);\n    var listQuestionLeftPanel = [];\n\n    Object.keys(Mquestion).forEach(\n        function(key){\n        listQuestionLeftPanel[listQuestionLeftPanel.length] = QuestionListGeneratingFunc(Mquestion[key]);\n    });\n\n    return(\n    <Paper class=\"leftPanel\" style={{overflowY: 'scroll'}}>\n        <div class=\"answer_quickview\">\n        <div class=\"leftPanel_heading\">\n              <span id=\"question\" className={headerClassname(\"question\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Questions</span>\n              <span id=\"exam_options\" className={headerClassname(\"exam_options\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Exam Options</span>\n        </div>\n        {leftpanelview()}\n        </div>\n      </Paper>\n    );\n}\n\nexport default LeftPanel;","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js",["75","76","77","78","79","80"],"import './McqQuestion.css'\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Paper, TextField, Checkbox, FormGroup} from '@material-ui/core';\nimport InputBase from '@material-ui/core/InputBase';\nimport { useDispatch } from 'react-redux';\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport {EditorState} from 'draft-js';\n\nimport QuestionEditor from './QuestionEditor';\n\nconst ADD_QUESTION = 'ADD_QUESTION';\nconst ADD_ANSWER = 'ADD_ANSWER';\n\n/*\nThis is the component that lets the maker create the question, and then stores the question to packedQuestion.\npackedQuestipn is in a format which can be directly sent to the API to be uploaded to the database.\nA basic question has question_text, question.title\n\nProps passed:\nprops.id = The Question ID.\n\nThings to Do:\n*/\n\n\nfunction McqQuestion(props) {\n\n    const [cn, setCn] = useState(\"Option-unselected\");\n    const [editorClassname, setEditorClassname] = useState(\"question-text\");\n    const [packedQuestion, setPackedQuestion] = useState({});\n    const [packedAnswer, setPackedAnswer] = useState([]);\n\n    const dispatch = useDispatch();\n\n\n    const [editorState, setEditorState] = React.useState(\n        () => EditorState.createEmpty(),);\n    \n    \n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} ques Packed question that gets stored directy into the store, ready for use later on.\n     */\n    function addQuestionAction(quesid, ques){\n\n        var retval = {\n            'type' : ADD_QUESTION,\n            'id' : quesid,\n            'question' : ques\n        };\n\n        return retval;\n    }\n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} answer Packed answer that gets stored directy into the store, ready for use later on.\n     */\n    function addAnswerAction(quesid, answer){\n        var retval = {\n            'type' : ADD_ANSWER,\n            'id' : quesid,\n            'answer' : answer\n        };\n\n        return retval;\n    }\n\n\n\n    /*These two variables store a local copy of packedQuestion. These variables are first updated with the information from\n    onChange (or a variation of it), and then packedQuestion is set to an instance of this. */\n\n    let local_question_mcq = {};\n    let local_answerChoices_mcq =  {};\n    var local_correct_answer = [];\n\n    /**\n     * When a new question is created, fillUpWithDefault gets called, and it fills up the Redux store with defaults for new Questions.\n     * This helps in making sure everything stored on the database is as per the schema, even if the user has left out things.\n     */\n    function fillUpWithDefault(){\n\n        function addOption(character, value) {\n            local_answerChoices_mcq[character] = value;\n            local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        }\n\n        /**\n         * Function that packs Questions.\n         * @param {Boolean} title Boolean isTitle. If the value is a title set to true. If it is question_text, set to false.\n         * @param {String} value Value that would be sent to packed question.\n         */\n        function addQuestion(title, value){\n\n            if(title){\n                local_question_mcq['title'] = value;\n            }\n            else {\n                local_question_mcq['question_text'] = value;\n            }\n\n        }\n\n        addQuestion(true, \"Question \"+props.id);\n        addQuestion(false, \"\");\n\n        addOption(\"a\", \"\");\n        addOption(\"b\", \"\");\n        addOption(\"c\", \"\");\n        addOption(\"d\", \"\");\n\n        local_question_mcq['title'] = \"Question \" + props.id;\n        local_question_mcq['id'] = props.id;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n        //These are for the answers\n        dispatch(addAnswerAction(\"ques\"+props.id, ''));\n\n    }\n\n    useEffect(() =>fillUpWithDefault(), []);\n\n\n    function optionOnInputFunc(character, value) {\n        local_question_mcq = {...packedQuestion};\n        local_answerChoices_mcq = {...local_question_mcq[\"answer_choices\"]};\n        local_answerChoices_mcq[character] = value;\n        local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n    }\n\n    function titleOnInputFunc(value){\n        local_question_mcq = {...packedQuestion};\n        local_question_mcq['title'] = value;\n        setPackedQuestion(local_question_mcq);\n    }\n\n    function questionOnInputFunc(value) {\n\n            setEditorState(value);\n            local_question_mcq = {...packedQuestion};\n            local_question_mcq['question_text'] = value.getCurrentContent().getPlainText();\n            setPackedQuestion(local_question_mcq);\n\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n    }\n\n    /**Returns the checkbox\n     * \n     * @param checkBox_id The letter than corresponds to the option choice\n     */\n    function checkb(checkBox_id){\n        \n        return(\n            <Checkbox\n            disableRipple={true}\n            onClick={(e)=>recordAnswer(checkBox_id, e)}\n            style={{ color: \"#FCA311\"}}\n            icon={<CheckBoxIcon fontSize=\"small\" style={{color: '#D9D9D9'}} />}\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\n          />\n          );\n    }\n\n    function recordAnswer(checkBox_id, event){\n        //This if statement checks if the checkbox is being checked or unchecked. We ignore if being unchecked.\n        if(event.target.checked){\n\n            local_correct_answer = packedAnswer;\n            local_correct_answer.push(checkBox_id);\n            setPackedAnswer(local_correct_answer);\n            dispatch(addAnswerAction(\"ques\"+props.id, checkBox_id));\n        }\n        else {\n            local_correct_answer = packedAnswer;\n            local_correct_answer.pop();\n            setPackedAnswer(local_correct_answer);\n            dispatch(addAnswerAction(\"ques\"+props.id, local_correct_answer[local_correct_answer.length-1]));\n        }\n\n    }\n\n\n    //Styling functions.\n    function cngenerator(char){\n        if(char==cn) return \"Option-selected\";\n        else return \"Option-unselected\";\n    }\n\n    function selectorcnGenerator(char){\n        if(char==cn) return \"selector-selected\";\n        else return \"selector-unselected\";\n    }\n\n\n    function mcqChoiceGeneratingFunc() {\n\n        return (\n            \n        <div class = \"Opt\">\n            <FormGroup>\n            <InputBase endAdornment={checkb('a')} startAdornment={<b className={selectorcnGenerator('a')}>a</b>} onChange = {e => optionOnInputFunc('a', e.target.value)} className={cngenerator('a')} onFocus={ () => setCn(\"a\")} onBlur={()=>setCn(\"\")} label=\"Option A\"/>\n            <InputBase endAdornment={checkb('b')} startAdornment={<b className={selectorcnGenerator('b')}>b</b>} onChange = {e => optionOnInputFunc('b', e.target.value)} className={cngenerator('b')} onFocus={ () => setCn(\"b\")} onBlur={()=>setCn(\"\")} label=\"Option B\"/>\n            <InputBase endAdornment={checkb('c')} startAdornment={<b className={selectorcnGenerator('c')}>c</b>} onChange = {e => optionOnInputFunc('c', e.target.value)} className={cngenerator('c')} onFocus={ () => setCn(\"c\")} onBlur={()=>setCn(\"\")} label=\"Option C\"/>\n            <InputBase endAdornment={checkb('d')} startAdornment={<b className={selectorcnGenerator('d')}>d</b>} onChange = {e => optionOnInputFunc('d', e.target.value)} className={cngenerator('d')} onFocus={ () => setCn(\"d\")} onBlur={()=>setCn(\"\")} label=\"Option D\"/>\n            </FormGroup>\n        </div>\n\n        );\n    }\n\n\n\n    return (\n\n        <Paper class=\"Question\">\n            <form class=\"Question-form\">\n\n                <a class = \"editpencil\">✎</a>\n                <InputBase class = \"questionedit\"\n                    autoComplete = \"off\"\n                    onChange = {e => titleOnInputFunc(e.target.value)}\n                    defaultValue={\"Question \"+props.id}\n                    inputProps = {{\"maxlength\": 40}}/>\n                \n\n                <div className={editorClassname}>\n                <QuestionEditor editorState={editorState} onChange={questionOnInputFunc} onFocus={setEditorClassname} onBlur={setEditorClassname}/>\n                </div>\n\n                <div class=\"correct_answer-text\"></div>\n                {mcqChoiceGeneratingFunc()}\n            </form>\n            \n        </Paper>\n\n\n    );\n\n}\n\nexport default McqQuestion;","/Users/waseehaque/Codes/McqApp/makers/src/components/QuestionEditor.js",["81","82","83","84","85"],"import { Paper } from '@material-ui/core';\nimport {Editor, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { useState } from 'react';\nimport React from 'react';\nimport './QuestionEditor.css'\n\n\n/**\n * Returns a question Editor, with all the necessary things.\n * \n * props.editorState\n * props.onChange\n * props.onFocus\n * props.onBlur\n */\nexport default function QuestionEditor(props){\n\n\n    function handleRichUtils(style){\n        \n        var newState;\n        switch(style){\n            case 'BOLD':\n                newState = RichUtils.toggleInlineStyle(props.editorState, 'BOLD');\n        }\n        if(newState) props.onChange(newState);\n        \n    }\n\n    function generateBlockStyle(){\n\n    }\n            \n\n    /**\n     * Function that handles command like ctrl+b to bold and ctrl+u to underline and the likes.\n     */\n    function handleKeyCommand(command, editorState){\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n\n        console.log(newState);\n\n        if (newState){\n            props.onChange(newState);\n        }\n        else {\n            console.log(\"Nothing to run that command on.\")\n        }\n\n    }\n\n\n    return (\n        <React.Fragment>\n            <div\n                    onFocus={() => props.onFocus(\"question-text-selected\")} \n                    onBlur={() => props.onBlur(\"question-text\")}>\n\n                <Editor placeholder=\"Add details to your Question\"\n                handleKeyCommand={handleKeyCommand} \n                editorState={props.editorState} \n                onChange={props.onChange}>\n                </Editor>\n\n            </div>\n        </React.Fragment>\n    );\n}","/Users/waseehaque/Codes/McqApp/makers/src/components/LoginPage.js",["86"],"import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { login, register } from \"./api\";\nimport { useSelector } from \"react-redux\";\n\n\n/*\n1. Moved the input elements into a form.\n2. className='LoginPage' has 100% width & 100% height, display grid to place the form always centered.\n3. all the elements inside the form has some margin & padding.\n*/\nfunction LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailCN, setEmailCN] = useState(\"id_text\");\n  const [pwCN, setPWCN] = useState(\"id_text\");\n\n\n  const reduxstore = useSelector(store=>store.session);\n\n  async function processLogin() {\n    //Do Some email validation\n    var user = await login(email, password);\n    console.log(user, \"User from login page\");\n  }\n\n  async function processRegister() {\n\n    //Do some email validation\n    //var user = await register(email, password);\n    console.log(reduxstore.session_token);\n  }\n\n  return (\n    <div className='LoginPage'>\n      <form className='LoginForm'>\n        <img\n          className='LoginForm-avatar'\n          src='https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png'\n          alt='Login Avatar'\n        />\n\n        {/* Input elements */}\n        <InputBase\n          className={emailCN}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder='Username'\n          onFocus={(e) => setEmailCN(\"id_text_selected\")}\n          onBlur={(e) => setEmailCN(\"id_text\")}\n        />\n        <InputBase\n          className={pwCN}\n          type='password'\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder='Password'\n          onFocus={(e) => setPWCN(\"id_text_selected\")}\n          onBlur={(e) => setPWCN(\"id_text\")}\n        />\n\n        <button className='button' type=\"button\" onClick={()=>{processLogin()}}>\n          Login\n        </button>\n\n        <div className='LoginForm-bar'></div>\n\n        <button className='button' type=\"button\" onClick={()=>{processRegister()}}>\n          Register\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginPage;\n",{"ruleId":"87","severity":1,"message":"88","line":10,"column":9,"nodeType":"89","messageId":"90","endLine":10,"endColumn":21},{"ruleId":"87","severity":1,"message":"91","line":18,"column":8,"nodeType":"89","messageId":"90","endLine":18,"endColumn":21},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"87","severity":1,"message":"96","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":16},{"ruleId":"87","severity":1,"message":"97","line":1,"column":18,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"98","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":26},{"ruleId":"87","severity":1,"message":"99","line":2,"column":28,"nodeType":"89","messageId":"90","endLine":2,"endColumn":36},{"ruleId":"87","severity":1,"message":"99","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"98","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"100","line":1,"column":38,"nodeType":"89","messageId":"90","endLine":1,"endColumn":48},{"ruleId":"87","severity":1,"message":"101","line":3,"column":16,"nodeType":"89","messageId":"90","endLine":3,"endColumn":22},{"ruleId":"102","severity":1,"message":"103","line":28,"column":34,"nodeType":"104","endLine":28,"endColumn":36,"suggestions":"105"},{"ruleId":"87","severity":1,"message":"106","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":28},{"ruleId":"87","severity":1,"message":"107","line":6,"column":21,"nodeType":"89","messageId":"90","endLine":6,"endColumn":30},{"ruleId":"108","severity":1,"message":"109","line":17,"column":26,"nodeType":"110","messageId":"111","endLine":17,"endColumn":28},{"ruleId":"108","severity":1,"message":"109","line":55,"column":17,"nodeType":"110","messageId":"111","endLine":55,"endColumn":19},{"ruleId":"87","severity":1,"message":"100","line":2,"column":38,"nodeType":"89","messageId":"90","endLine":2,"endColumn":48},{"ruleId":"87","severity":1,"message":"107","line":3,"column":17,"nodeType":"89","messageId":"90","endLine":3,"endColumn":26},{"ruleId":"102","severity":1,"message":"112","line":127,"column":41,"nodeType":"104","endLine":127,"endColumn":43,"suggestions":"113"},{"ruleId":"108","severity":1,"message":"109","line":195,"column":16,"nodeType":"110","messageId":"111","endLine":195,"endColumn":18},{"ruleId":"108","severity":1,"message":"109","line":200,"column":16,"nodeType":"110","messageId":"111","endLine":200,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":228,"column":17,"nodeType":"116","endLine":228,"endColumn":41},{"ruleId":"87","severity":1,"message":"117","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":15},{"ruleId":"87","severity":1,"message":"99","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":18},{"ruleId":"87","severity":1,"message":"118","line":20,"column":14,"nodeType":"89","messageId":"90","endLine":20,"endColumn":29},{"ruleId":"119","severity":1,"message":"120","line":23,"column":9,"nodeType":"121","messageId":"122","endLine":26,"endColumn":10},{"ruleId":"87","severity":1,"message":"123","line":31,"column":14,"nodeType":"89","messageId":"90","endLine":31,"endColumn":32},{"ruleId":"87","severity":1,"message":"124","line":4,"column":17,"nodeType":"89","messageId":"90","endLine":4,"endColumn":25},"no-unused-vars","'firebaseInit' is defined but never used.","Identifier","unusedVar","'TestComponent' is defined but never used.","no-native-reassign",["125"],"no-negated-in-lhs",["126"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'Hidden' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onInitialLoad'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'TrendingUpOutlined' is defined but never used.","'TextField' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fillUpWithDefault'. Either include it or remove the dependency array.",["128"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Paper' is defined but never used.","'handleRichUtils' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'generateBlockStyle' is defined but never used.","'register' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [onInitialLoad]",{"range":"133","text":"134"},"Update the dependencies array to be: [fillUpWithDefault]",{"range":"135","text":"136"},[704,706],"[onInitialLoad]",[4159,4161],"[fillUpWithDefault]"]