[{"/Users/waseehaque/Codes/McqApp/makers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/makers/src/components/App.js":"3","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js":"4","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js":"5","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js":"6","/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js":"7"},{"size":897,"mtime":1609673161063,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1608538176884,"results":"10","hashOfConfig":"9"},{"size":2149,"mtime":1609678856824,"results":"11","hashOfConfig":"9"},{"size":975,"mtime":1609586430901,"results":"12","hashOfConfig":"9"},{"size":8920,"mtime":1609678499907,"results":"13","hashOfConfig":"9"},{"size":793,"mtime":1609674313802,"results":"14","hashOfConfig":"9"},{"size":1847,"mtime":1609675617855,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ed4oe2",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/waseehaque/Codes/McqApp/makers/src/index.js",[],["35","36"],"/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/App.js",["37"],"import './App.css';\nimport ExamArea from './ExamArea';\nimport { Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List'\nimport Paper from '@material-ui/core/Paper'\nimport { useSelector } from 'react-redux';\n\n\nfunction App() {\n\n\n  //This variable has all the questions.\n  let Mquestion = useSelector(store => store.questions);\n  let fullstore = useSelector(store =>store);\n\n  /**\n   * @param finished\n   * The function gets called on clicking Publish Questions. This packs everything neatly for the API and eventually call\n   * call the API to push everything to the website.\n   */\n  function finished() {\n\n    console.log(fullstore);\n\n  }\n\n  function QuestionListGeneratingFunc(ques) {\n    var quickviewElementclass = \"answer_quickview_element_answered\";\n    return(<li class={quickviewElementclass}> {ques.title}</li>);\n}\n\nvar listQuestionLeftPanel = [];\n\nObject.keys(Mquestion).forEach(\n  function(key){\n    listQuestionLeftPanel[listQuestionLeftPanel.length] = QuestionListGeneratingFunc(Mquestion[key]);\n  });\n\n\n\n    return (\n\n      <div class=\"App\">\n        <Grid container spacing={0} display=\"inline\">\n\n          {/**Old Top Panel */}\n          <Grid item xs={12}>\n            <AppBar style={{background: '#14213D', position: \"fixed\"}}>\n              <Toolbar><b>MAKERS</b>\n                {/*CSS for the submit button is in App.css*/}\n                <button onClick={() => finished(3)} class=\"submit_button\">Publish Test</button>\n              </Toolbar>\n            </AppBar>\n          </Grid>\n\n\n         {/**Old Left Panel */}\n          <Grid item xs={4}>\n            <Paper class=\"leftPanel\" style={{overflowY: 'scroll'}}>\n              <div class=\"answer_quickview\">\n                <h4 class=\"all_question\">MCQ Test Options</h4>\n                <List >{listQuestionLeftPanel}</List>\n              </div>\n            </Paper>\n          </Grid>\n\n\n          <Grid item xs={8}>\n            <ExamArea/>\n          </Grid>\n\n        </Grid>\n\n      </div>\n    );\n  }\n\n\nexport default App;","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js",["38"],"import McqQuestion from './McqQuestion'\nimport React, { useState, useEffect } from 'react';\nimport './ExamArea.css'\n\n/*\nThis component generates McqQuestion components one after another, and gets them their ids. That is all.\n\nThe props to be passed:\n\nThings to do:\n1. Style out the whole thing.\n2. Add a way to record the correct answer.\n*/\n\n\nfunction ExamArea() {\n\n    const[currentQuesID, setCurrentQuesID] = useState(2);\n    const[mcqQuestionIDList, setmcqQuestionIDList] = useState([1]);\n\n\n    function addAnotherQuestion() {\n        setmcqQuestionIDList(mcqQuestionIDList.concat(currentQuesID));\n        setCurrentQuesID(currentQuesID+1);\n     }\n        \n\n    return (\n        \n\n        <div className=\"ExamArea\">\n             {mcqQuestionIDList.map((idi) => <McqQuestion id={idi}/>) }\n            <button onClick={()=>addAnotherQuestion()} class=\"add_another_question_button\">+ Add Another Question</button>\n        </div> \n\n        );\n    \n\n}\n\nexport default ExamArea;","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js",["39","40","41","42","43","44","45"],"import './McqQuestion.css'\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Paper, TextField, Checkbox} from '@material-ui/core';\nimport InputBase from '@material-ui/core/InputBase';\nimport { useDispatch } from 'react-redux';\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\n\nconst ADD_QUESTION = 'ADD_QUESTION';\nconst ADD_ANSWER = 'ADD_ANSWER';\n\n/*\nThis is the component that lets the maker create the question, and then stores the question to packedQuestion.\npackedQuestipn is in a format which can be directly sent to the API to be uploaded to the database.\nA basic question has question_text, question.title\n\nProps passed:\nprops.id = The Question ID.\n\nThings to Do:\n1. [OBSOLETE] Send packedQuestion to returnFunction() somewhere in the code.\n2. Design and style the input fields.\n3. Figure out a way to pass the correct answers.\n\n*/\n\n\nfunction McqQuestion(props) {\n\n    const [cn, setCn] = useState(\"Option-unselected\");\n\n    const dispatch = useDispatch();\n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} ques Packed question that gets stored directy into the store, ready for use later on.\n     */\n    function addQuestionAction(quesid, ques){\n\n        var retval = {\n            'type' : ADD_QUESTION,\n            'id' : quesid,\n            'question' : ques\n        };\n\n        return retval;\n    }\n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} answer Packed answer that gets stored directy into the store, ready for use later on.\n     */\n    function addAnswerAction(quesid, answer){\n        var retval = {\n            'type' : ADD_ANSWER,\n            'id' : quesid,\n            'answer' : answer\n        };\n\n        return retval;\n    }\n\n    \n    const [packedQuestion, setPackedQuestion] = useState({});\n    const [packedAnswer, setPackedAnswer] = useState({});\n\n\n    /*These two variables store a local copy of packedQuestion. These variables are first updated with the information from\n    onChange (or a variation of it), and then packedQuestion is set to an instance of this. */\n\n    let local_question_mcq = {};\n    let local_answerChoices_mcq =  {};\n    let local_correct_answer = {};\n\n    /**\n     * When a new question is created, fillUpWithDefault gets called, and it fills up the Redux store with defaults for new Questions.\n     * This helps in making sure everything stored on the database is as per the schema, even if the user has left out things.\n     */\n    function fillUpWithDefault(){\n\n        function addOption(character, value) {\n            local_answerChoices_mcq[character] = value;\n            local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        }\n\n        /**\n         * Function that packs Questions.\n         * @param {Boolean} title Boolean isTitle. If the value is a title set to true. If it is question_text, set to false.\n         * @param {String} value Value that would be sent to packed question.\n         */\n        function addQuestion(title, value){\n\n            if(title){\n                local_question_mcq['title'] = value;\n            }\n            else {\n                local_question_mcq['question_text'] = value;\n            }\n\n        }\n\n        addQuestion(true, \"Question \"+props.id);\n        addQuestion(false, \"\");\n\n        addOption(\"a\", \"\");\n        addOption(\"b\", \"\");\n        addOption(\"c\", \"\");\n        addOption(\"d\", \"\");\n\n        local_question_mcq['title'] = \"Question \" + props.id;\n        local_question_mcq['id'] = props.id;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n        //These are for the answers\n        local_correct_answer['ques'+props.id] = '';\n        setPackedAnswer(local_correct_answer);\n        dispatch(addAnswerAction(\"ques\"+props.id, local_correct_answer));\n\n    }\n\n    useEffect(() =>fillUpWithDefault(), []);\n\n\n    function optionOnInputFunc(character, value) {\n        local_question_mcq = {...packedQuestion};\n        local_answerChoices_mcq = {...local_question_mcq[\"answer_choices\"]};\n        local_answerChoices_mcq[character] = value;\n        local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n    }\n\n    function questionOnInputFunc(title, value) {\n\n        if(title){\n            local_question_mcq = {...packedQuestion};\n            local_question_mcq['title'] = value;\n            setPackedQuestion(local_question_mcq);\n        }\n\n        else {\n            local_question_mcq = {...packedQuestion};\n            local_question_mcq['question_text'] = value;\n            setPackedQuestion(local_question_mcq);\n        }\n\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n    }\n\n    /**Returns the checkbox\n     * \n     * @param checkBox_id The letter than corresponds to the option choice\n     */\n    function checkb(checkBox_id){\n        \n        if(cn==checkBox_id){\n        return(\n            <Checkbox\n            disableRipple={true}\n            onClick={(e)=>recordAnswer(checkBox_id, e)}\n            style={{ color: \"#FCA311\"}}\n            name=\"option\"\n            icon={<CheckBoxIcon fontSize=\"small\" style={{color: '#D9D9D9'}} />}\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\n          />\n          );\n\n        }\n        else {\n            return(\n                <Checkbox\n                disableRipple={true}\n                onClick={(e)=>recordAnswer(checkBox_id, e)}\n                style={{ color: \"#FCA311\"}}\n                name=\"option\"\n                icon={<CheckBoxIcon fontSize=\"small\" style={{ color: \"#D9D9D9\"}}/>}\n                checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\n              />\n            );\n        }\n    }\n\n    function recordAnswer(checkBox_id, event){\n        //This if statement checks if the checkbox is being checked or unchecked. We ignore if being unchecked.\n        if(event.target.checked){\n\n            local_correct_answer = {...packedAnswer};\n            local_correct_answer['ques'+props.id] = checkBox_id;\n            setPackedAnswer(local_correct_answer);\n            \n            dispatch(addAnswerAction(\"ques\"+props.id, local_correct_answer));\n        }\n\n    }\n\n\n    //Styling functions.\n    function cngenerator(char){\n        if(char==cn) return \"Option-selected\";\n        else return \"Option-unselected\";\n    }\n\n    function selectorcnGenerator(char){\n        if(char==cn) return \"selector-selected\";\n        else return \"selector-unselected\";\n    }\n\n\n    function mcqChoiceGeneratingFunc() {\n\n        return (\n            \n            <div class = \"Opt\">\n        <InputBase endAdornment={checkb('a')} startAdornment={<b class={selectorcnGenerator('a')}>a</b>} onChange = {e => optionOnInputFunc('a', e.target.value)} className={cngenerator('a')} onSelect={ () => setCn(\"a\")} label=\"Option A\"/>\n        <InputBase endAdornment={checkb('b')} startAdornment={<b class={selectorcnGenerator('b')}>b</b>} onChange = {e => optionOnInputFunc('b', e.target.value)} className={cngenerator('b')} onSelect={ () => setCn(\"b\")} label=\"Option B\"/>\n        <InputBase endAdornment={checkb('c')} startAdornment={<b class={selectorcnGenerator('c')}>c</b>} onChange = {e => optionOnInputFunc('c', e.target.value)} className={cngenerator('c')} onSelect={ () => setCn(\"c\")} label=\"Option C\"/>\n        <InputBase endAdornment={checkb('d')} startAdornment={<b class={selectorcnGenerator('d')}>d</b>} onChange = {e => optionOnInputFunc('d', e.target.value)} className={cngenerator('d')} onSelect={ () => setCn(\"d\")} label=\"Option D\"/>\n            </div>\n\n        );\n    }\n\n\n\n    return (\n\n        <Paper class=\"Question\">\n            <form class=\"Question-form\">\n\n                <a class = \"editpencil\">✎</a>\n                <InputBase class = \"questionedit\"\n                    autoComplete = \"off\"\n                    onChange = {e => questionOnInputFunc(true, e.target.value)}\n                    defaultValue={\"Question \"+props.id}\n                    inputProps = {{\"maxlength\": 40}}/>\n                \n\n                <div class=\"question-text\">\n                    <TextField style={{}} onChange = {e => questionOnInputFunc(false, e.target.value)} variant=\"outlined\" fullWidth=\"true\" label=\"Type your question\"></TextField>\n                </div>\n                <div class=\"correct_answer-text\"></div>\n                {mcqChoiceGeneratingFunc()}\n\n\n            </form>\n            \n        </Paper>\n\n\n    );\n\n}\n\nexport default McqQuestion;","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js",["46","47","48","49","50","51"],"import './McqQuestion.css'\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Checkbox } from '@material-ui/core';\nimport InputBase from '@material-ui/core/InputBase';\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport { useDispatch } from 'react-redux';\n\n\nfunction TestComponent(props) {\n\n    const [cn, setCn] = useState(\"Option-unselected\");\n\n    function cngenerator(char){\n        if(char==cn) return \"Option-selected\";\n        else return \"Option-unselected\";\n    }\n\n    function selectorcnGenerator(char){\n        if(char==cn) return \"selector-selected\";\n        else return \"selector-unselected\";\n    }\n\n    function optionOnInputFunc(){\n\n    }\n\n    function checkb(){\n        return(\n            <Checkbox\n            disableRipple={true}\n            style={{ color: \"#FCA311\" }}\n            name=\"checkedG\"\n            icon={<CheckBoxOutlineBlankIcon fontSize=\"large\" />}\n            checkedIcon={<CheckBoxIcon fontSize=\"large\" />}\n          />\n        );\n    }\n\n\n\n    return(\n        <div class='question'>\n        <InputBase endAdornment={checkb()} startAdornment={<b class={selectorcnGenerator('a')}>a</b>}  className={cngenerator('a')} onSelect={ () => setCn(\"a\")} label=\"Option A\"/>\n        <InputBase startAdornment={<b class={selectorcnGenerator('b')}>b</b>}  className={cngenerator('b')} onSelect={ () => setCn(\"b\")} label=\"Option B\"/>\n        <InputBase startAdornment={<b class={selectorcnGenerator('c')}>c</b>}  className={cngenerator('c')} onSelect={ () => setCn(\"c\")} label=\"Option C\"/>\n        <InputBase startAdornment={<b class={selectorcnGenerator('d')}>d</b>}  className={cngenerator('d')} onSelect={ () => setCn(\"d\")} label=\"Option D\"/>\n            \n        </div>\n    )\n\n}\n\nexport default TestComponent;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":4,"column":17,"nodeType":"58","messageId":"59","endLine":4,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":36},{"ruleId":"56","severity":1,"message":"61","line":2,"column":38,"nodeType":"58","messageId":"59","endLine":2,"endColumn":48},{"ruleId":"56","severity":1,"message":"62","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":32},{"ruleId":"63","severity":1,"message":"64","line":125,"column":41,"nodeType":"65","endLine":125,"endColumn":43,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":162,"column":14,"nodeType":"69","messageId":"70","endLine":162,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":205,"column":16,"nodeType":"69","messageId":"70","endLine":205,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":210,"column":16,"nodeType":"69","messageId":"70","endLine":210,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":236,"column":17,"nodeType":"73","endLine":236,"endColumn":41},{"ruleId":"56","severity":1,"message":"60","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":36},{"ruleId":"56","severity":1,"message":"61","line":2,"column":38,"nodeType":"58","messageId":"59","endLine":2,"endColumn":48},{"ruleId":"56","severity":1,"message":"74","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":15,"column":16,"nodeType":"69","messageId":"70","endLine":15,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":20,"column":16,"nodeType":"69","messageId":"70","endLine":20,"endColumn":18},{"ruleId":"56","severity":1,"message":"75","line":24,"column":14,"nodeType":"58","messageId":"59","endLine":24,"endColumn":31},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useContext' is defined but never used.","'CheckBoxOutlineBlankIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fillUpWithDefault'. Either include it or remove the dependency array.","ArrayExpression",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useDispatch' is defined but never used.","'optionOnInputFunc' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [fillUpWithDefault]",{"range":"81","text":"82"},[4239,4241],"[fillUpWithDefault]"]