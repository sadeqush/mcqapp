[{"/Users/waseehaque/Codes/McqApp/makers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/makers/src/components/App.js":"3","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js":"4","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js":"5","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js":"6","/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js":"7","/Users/waseehaque/Codes/McqApp/makers/src/components/LeftPanel.js":"8","/Users/waseehaque/Codes/McqApp/makers/src/components/api.js":"9"},{"size":937,"mtime":1610554863234,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1608538176884,"results":"12","hashOfConfig":"11"},{"size":3453,"mtime":1610885167807,"results":"13","hashOfConfig":"11"},{"size":1009,"mtime":1610731470779,"results":"14","hashOfConfig":"11"},{"size":8842,"mtime":1610735381025,"results":"15","hashOfConfig":"11"},{"size":1232,"mtime":1610554863233,"results":"16","hashOfConfig":"11"},{"size":400,"mtime":1610554863234,"results":"17","hashOfConfig":"11"},{"size":2872,"mtime":1610554863231,"results":"18","hashOfConfig":"11"},{"size":884,"mtime":1610885105927,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ed4oe2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/waseehaque/Codes/McqApp/makers/src/index.js",[],["42","43"],"/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/App.js",["44","45","46"],"/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js",["47","48","49","50","51","52"],"import './McqQuestion.css'\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Paper, TextField, Checkbox, FormGroup} from '@material-ui/core';\nimport InputBase from '@material-ui/core/InputBase';\nimport { useDispatch } from 'react-redux';\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport {Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nconst ADD_QUESTION = 'ADD_QUESTION';\nconst ADD_ANSWER = 'ADD_ANSWER';\n\n/*\nThis is the component that lets the maker create the question, and then stores the question to packedQuestion.\npackedQuestipn is in a format which can be directly sent to the API to be uploaded to the database.\nA basic question has question_text, question.title\n\nProps passed:\nprops.id = The Question ID.\n\nThings to Do:\n*/\n\n\nfunction McqQuestion(props) {\n\n    const [cn, setCn] = useState(\"Option-unselected\");\n    const [editorClassname, setEditorClassname] = useState(\"question-text\");\n    const [packedQuestion, setPackedQuestion] = useState({});\n    const [packedAnswer, setPackedAnswer] = useState([]);\n\n    const dispatch = useDispatch();\n\n\n    const [editorState, setEditorState] = React.useState(\n        () => EditorState.createEmpty(),);\n    \n    \n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} ques Packed question that gets stored directy into the store, ready for use later on.\n     */\n    function addQuestionAction(quesid, ques){\n\n        var retval = {\n            'type' : ADD_QUESTION,\n            'id' : quesid,\n            'question' : ques\n        };\n\n        return retval;\n    }\n\n    /**\n     * This function is the action that gets passed to the Redux store.\n     * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n     * @param {Object} answer Packed answer that gets stored directy into the store, ready for use later on.\n     */\n    function addAnswerAction(quesid, answer){\n        var retval = {\n            'type' : ADD_ANSWER,\n            'id' : quesid,\n            'answer' : answer\n        };\n\n        return retval;\n    }\n\n\n\n    /*These two variables store a local copy of packedQuestion. These variables are first updated with the information from\n    onChange (or a variation of it), and then packedQuestion is set to an instance of this. */\n\n    let local_question_mcq = {};\n    let local_answerChoices_mcq =  {};\n    var local_correct_answer = [];\n\n    /**\n     * When a new question is created, fillUpWithDefault gets called, and it fills up the Redux store with defaults for new Questions.\n     * This helps in making sure everything stored on the database is as per the schema, even if the user has left out things.\n     */\n    function fillUpWithDefault(){\n\n        function addOption(character, value) {\n            local_answerChoices_mcq[character] = value;\n            local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        }\n\n        /**\n         * Function that packs Questions.\n         * @param {Boolean} title Boolean isTitle. If the value is a title set to true. If it is question_text, set to false.\n         * @param {String} value Value that would be sent to packed question.\n         */\n        function addQuestion(title, value){\n\n            if(title){\n                local_question_mcq['title'] = value;\n            }\n            else {\n                local_question_mcq['question_text'] = value;\n            }\n\n        }\n\n        addQuestion(true, \"Question \"+props.id);\n        addQuestion(false, \"\");\n\n        addOption(\"a\", \"\");\n        addOption(\"b\", \"\");\n        addOption(\"c\", \"\");\n        addOption(\"d\", \"\");\n\n        local_question_mcq['title'] = \"Question \" + props.id;\n        local_question_mcq['id'] = props.id;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n        //These are for the answers\n        dispatch(addAnswerAction(\"ques\"+props.id, ''));\n\n    }\n\n    useEffect(() =>fillUpWithDefault(), []);\n\n\n    function optionOnInputFunc(character, value) {\n        local_question_mcq = {...packedQuestion};\n        local_answerChoices_mcq = {...local_question_mcq[\"answer_choices\"]};\n        local_answerChoices_mcq[character] = value;\n        local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n        \n        setPackedQuestion(local_question_mcq);\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n\n    }\n\n    function titleOnInputFunc(value){\n        local_question_mcq = {...packedQuestion};\n        local_question_mcq['title'] = value;\n        setPackedQuestion(local_question_mcq);\n    }\n\n    function questionOnInputFunc(value) {\n\n            setEditorState(value);\n            local_question_mcq = {...packedQuestion};\n            local_question_mcq['question_text'] = value.getCurrentContent().getPlainText();\n            setPackedQuestion(local_question_mcq);\n\n        dispatch(addQuestionAction(\"ques\"+props.id, local_question_mcq));\n    }\n\n    /**Returns the checkbox\n     * \n     * @param checkBox_id The letter than corresponds to the option choice\n     */\n    function checkb(checkBox_id){\n        \n        return(\n            <Checkbox\n            disableRipple={true}\n            onClick={(e)=>recordAnswer(checkBox_id, e)}\n            style={{ color: \"#FCA311\"}}\n            icon={<CheckBoxIcon fontSize=\"small\" style={{color: '#D9D9D9'}} />}\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\n          />\n          );\n    }\n\n    function recordAnswer(checkBox_id, event){\n        //This if statement checks if the checkbox is being checked or unchecked. We ignore if being unchecked.\n        if(event.target.checked){\n\n            local_correct_answer = packedAnswer;\n            local_correct_answer.push(checkBox_id);\n            setPackedAnswer(local_correct_answer);\n            dispatch(addAnswerAction(\"ques\"+props.id, checkBox_id));\n        }\n        else {\n            local_correct_answer = packedAnswer;\n            local_correct_answer.pop();\n            setPackedAnswer(local_correct_answer);\n            dispatch(addAnswerAction(\"ques\"+props.id, local_correct_answer[local_correct_answer.length-1]));\n        }\n\n    }\n\n\n    //Styling functions.\n    function cngenerator(char){\n        if(char==cn) return \"Option-selected\";\n        else return \"Option-unselected\";\n    }\n\n    function selectorcnGenerator(char){\n        if(char==cn) return \"selector-selected\";\n        else return \"selector-unselected\";\n    }\n\n\n    function mcqChoiceGeneratingFunc() {\n\n        return (\n            \n        <div class = \"Opt\">\n            <FormGroup>\n            <InputBase endAdornment={checkb('a')} startAdornment={<b className={selectorcnGenerator('a')}>a</b>} onChange = {e => optionOnInputFunc('a', e.target.value)} className={cngenerator('a')} onFocus={ () => setCn(\"a\")} onBlur={()=>setCn(\"\")} label=\"Option A\"/>\n            <InputBase endAdornment={checkb('b')} startAdornment={<b className={selectorcnGenerator('b')}>b</b>} onChange = {e => optionOnInputFunc('b', e.target.value)} className={cngenerator('b')} onFocus={ () => setCn(\"b\")} onBlur={()=>setCn(\"\")} label=\"Option B\"/>\n            <InputBase endAdornment={checkb('c')} startAdornment={<b className={selectorcnGenerator('c')}>c</b>} onChange = {e => optionOnInputFunc('c', e.target.value)} className={cngenerator('c')} onFocus={ () => setCn(\"c\")} onBlur={()=>setCn(\"\")} label=\"Option C\"/>\n            <InputBase endAdornment={checkb('d')} startAdornment={<b className={selectorcnGenerator('d')}>d</b>} onChange = {e => optionOnInputFunc('d', e.target.value)} className={cngenerator('d')} onFocus={ () => setCn(\"d\")} onBlur={()=>setCn(\"\")} label=\"Option D\"/>\n            </FormGroup>\n        </div>\n\n        );\n    }\n\n\n\n    return (\n\n        <Paper class=\"Question\">\n            <form class=\"Question-form\">\n\n                <a class = \"editpencil\">✎</a>\n                <InputBase class = \"questionedit\"\n                    autoComplete = \"off\"\n                    onChange = {e => titleOnInputFunc(e.target.value)}\n                    defaultValue={\"Question \"+props.id}\n                    inputProps = {{\"maxlength\": 40}}/>\n                \n\n                <div className={editorClassname}>\n                    <Editor placeholder=\"Add details to your Question\"  editorState={editorState} onChange={questionOnInputFunc} onFocus={() => setEditorClassname(\"question-text-selected\")} onBlur={() => setEditorClassname(\"question-text\")}/>\n                </div>\n\n                <div class=\"correct_answer-text\"></div>\n                {mcqChoiceGeneratingFunc()}\n            </form>\n            \n        </Paper>\n\n\n    );\n\n}\n\nexport default McqQuestion;","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/testComponent.js",["53","54","55"],"import React, { useState, useEffect, useContext } from 'react';\n\nfunction TestComponent(props) {\n\n\n    return(\n        <div>\n            <input type=\"email\" placeholder=\"Email ID\" id=\"email\"></input>\n            <input type=\"password\" placeholder=\"Password\" id=\"password\"></input>\n            <button type=\"submit\" value=\"submit\">Submit</button>\n        </div>\n    );\n}\n\nexport default TestComponent;","/Users/waseehaque/Codes/McqApp/makers/src/components/LeftPanel.js",["56","57","58"],"import React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport Paper from '@material-ui/core/Paper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './LeftPanel.css';\nimport { InputBase, TextField } from '@material-ui/core';\n\nfunction LeftPanel() {\n\n    const dispatch = useDispatch();\n\n    const[selectedHeader, setSelectedHeader] = useState(\"question\");\n    /**\n     * This returns the view that would be seen in the left panel based on what header option is selected.\n     */\n    function leftpanelview() {\n        if(selectedHeader==\"question\") return(\n\n        <List>{listQuestionLeftPanel}</List>\n\n        );\n        else return(\n        <div>\n            <InputBase className=\"leftpanel_title_changer\" onChange={(e)=> titleOnChange(e.target.value)} placeholder=\"Exam Title\" style={{borderStyle: \"solid\", borderWidth: \"1px\", borderColor: \"#d9d9d9\"}}></InputBase>\n        </div>\n        );\n    }\n\n    function addTitleAction(target){\n        return {\n            type : \"ADD_TITLE\",\n            id : \"title\",\n            value : target\n        }\n    }\n\n    function titleOnChange(value){\n        dispatch(addTitleAction(value));\n    }\n\n    /**\n     * The function that gets called when  left panel headings are clicked. It changes out the app properties in store and renders\n     * the required view.\n     *  @param value String with the value for what panel to show.\n     */\n    function leftPanelHeadingOnClick(e) {\n        setSelectedHeader(e.target.id);\n    }\n\n    /**\n     * Returns the appropriate classname for the element.\n     * @param {String} event ID of the header element\n     */\n    function headerClassname(event){\n        if(event==selectedHeader){\n            return \"leftpanel_heading_element_selected\"\n        }\n        else {\n            return \"leftpanel_heading_element\";\n        }\n    }\n    \n\n    function QuestionListGeneratingFunc(ques) {\n        var quickviewElementclass = \"answer_quickview_element_answered\";\n        return(<li class={quickviewElementclass}> {ques.title}</li>);\n    }\n\n    \n    let Mquestion = useSelector(store => store.questions);\n    var listQuestionLeftPanel = [];\n\n    Object.keys(Mquestion).forEach(\n        function(key){\n        listQuestionLeftPanel[listQuestionLeftPanel.length] = QuestionListGeneratingFunc(Mquestion[key]);\n    });\n\n    return(\n    <Paper class=\"leftPanel\" style={{overflowY: 'scroll'}}>\n        <div class=\"answer_quickview\">\n        <div class=\"leftPanel_heading\">\n              <span id=\"question\" className={headerClassname(\"question\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Questions</span>\n              <span id=\"exam_options\" className={headerClassname(\"exam_options\")} onClick={(e)=>leftPanelHeadingOnClick(e)}>Exam Options</span>\n        </div>\n        {leftpanelview()}\n        </div>\n      </Paper>\n    );\n}\n\nexport default LeftPanel;","/Users/waseehaque/Codes/McqApp/makers/src/components/api.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":3,"column":16,"nodeType":"65","messageId":"66","endLine":3,"endColumn":22},{"ruleId":"67","severity":1,"message":"68","line":32,"column":9,"nodeType":"69","messageId":"70","endLine":35,"endColumn":10},{"ruleId":"71","severity":1,"message":"72","line":50,"column":34,"nodeType":"73","endLine":50,"endColumn":36,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"75","line":2,"column":38,"nodeType":"65","messageId":"66","endLine":2,"endColumn":48},{"ruleId":"63","severity":1,"message":"76","line":3,"column":17,"nodeType":"65","messageId":"66","endLine":3,"endColumn":26},{"ruleId":"71","severity":1,"message":"77","line":126,"column":41,"nodeType":"73","endLine":126,"endColumn":43,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":194,"column":16,"nodeType":"81","messageId":"82","endLine":194,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":199,"column":16,"nodeType":"81","messageId":"82","endLine":199,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":227,"column":17,"nodeType":"85","endLine":227,"endColumn":41},{"ruleId":"63","severity":1,"message":"86","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"87","line":1,"column":27,"nodeType":"65","messageId":"66","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"75","line":1,"column":38,"nodeType":"65","messageId":"66","endLine":1,"endColumn":48},{"ruleId":"63","severity":1,"message":"76","line":6,"column":21,"nodeType":"65","messageId":"66","endLine":6,"endColumn":30},{"ruleId":"79","severity":1,"message":"80","line":17,"column":26,"nodeType":"81","messageId":"82","endLine":17,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":55,"column":17,"nodeType":"81","messageId":"82","endLine":55,"endColumn":19},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Hidden' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'isAlright'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onInitialLoad'. Either include it or remove the dependency array.","ArrayExpression",["90"],"'useContext' is defined but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'fillUpWithDefault'. Either include it or remove the dependency array.",["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [onInitialLoad]",{"range":"96","text":"97"},"Update the dependencies array to be: [fillUpWithDefault]",{"range":"98","text":"99"},[1198,1200],"[onInitialLoad]",[4153,4155],"[fillUpWithDefault]"]