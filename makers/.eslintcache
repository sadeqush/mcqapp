[{"/Users/waseehaque/Codes/McqApp/makers/src/index.js":"1","/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js":"2","/Users/waseehaque/Codes/McqApp/makers/src/components/store.js":"3","/Users/waseehaque/Codes/McqApp/makers/src/components/App.js":"4","/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard.js":"5","/Users/waseehaque/Codes/McqApp/makers/src/components/api.js":"6","/Users/waseehaque/Codes/McqApp/makers/src/components/ErrorPage.js":"7","/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard-exam.js":"8","/Users/waseehaque/Codes/McqApp/makers/src/components/LoginPage.js":"9","/Users/waseehaque/Codes/McqApp/makers/src/components/Profile.js":"10","/Users/waseehaque/Codes/McqApp/makers/src/components/Settings.js":"11","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamView.js":"12","/Users/waseehaque/Codes/McqApp/makers/src/components/Spinner.js":"13","/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js":"14","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js":"15","/Users/waseehaque/Codes/McqApp/makers/src/components/QuestionEditor.js":"16"},{"size":1061,"mtime":1611656570748,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1608538176884,"results":"19","hashOfConfig":"18"},{"size":2026,"mtime":1611754519637,"results":"20","hashOfConfig":"18"},{"size":713,"mtime":1612009872768,"results":"21","hashOfConfig":"18"},{"size":5277,"mtime":1612098139182,"results":"22","hashOfConfig":"18"},{"size":7193,"mtime":1612240908038,"results":"23","hashOfConfig":"18"},{"size":620,"mtime":1611749239767,"results":"24","hashOfConfig":"18"},{"size":2231,"mtime":1612095620436,"results":"25","hashOfConfig":"18"},{"size":4274,"mtime":1612098221617,"results":"26","hashOfConfig":"18"},{"size":454,"mtime":1611832399745,"results":"27","hashOfConfig":"18"},{"size":781,"mtime":1611832399746,"results":"28","hashOfConfig":"18"},{"size":2821,"mtime":1612092489697,"results":"29","hashOfConfig":"18"},{"size":245,"mtime":1612030084177,"results":"30","hashOfConfig":"18"},{"size":2277,"mtime":1612092459446,"results":"31","hashOfConfig":"18"},{"size":8806,"mtime":1611757012967,"results":"32","hashOfConfig":"18"},{"size":3075,"mtime":1611645745242,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"ed4oe2",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"37"},"/Users/waseehaque/Codes/McqApp/makers/src/index.js",["74"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./components/index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./components/store\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport LoginPage from \"./components/App\";\n\n//Test Imports\nimport TestComponent from \"./components/Dashboard\";\nvar test = false;\n\nif (test) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <TestComponent></TestComponent>\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n} else {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["75","76"],"/Users/waseehaque/Codes/McqApp/makers/src/reportWebVitals.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/store.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/App.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/api.js",["77","78","79","80","81","82","83","84","85","86"],"/Users/waseehaque/Codes/McqApp/makers/src/components/ErrorPage.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/Dashboard-exam.js",["87","88","89","90","91"],"import React, { useEffect, useState } from \"react\";\nimport \"./Dashboard-exam.css\";\nimport {getExamProperty} from './api'\n\nfunction DashboardExam(props) {\n  // Display view more btn functionality\n  const [viewMore, setViewMore] = useState(false);\n  const [property, setProperty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const viewMoreHandler = () =>\n    !viewMore ? setViewMore(true) : setViewMore(false);\n  const viewMoreBtn = viewMore ? (\n    <button className='btn-viewMore'>View result</button>\n  ) : null;\n\n  const copyValueHandler = () => console.log(\"Copy func\");\n\n\n  useEffect( () => {\n    async function funcccc() {\n      var examProperty =  await getExamProperty(props.examID);\n      setProperty(examProperty);\n  } funcccc();\n  } , []); \n\n\n\n  return (\n    <div className='Dashboard-board'>\n      <div className='top'>\n        <div className='board-content'>\n          <h3>{property.title}</h3>\n          <p>\n            Created: <span>{Date(property.creation_time)}</span>\n          </p>\n          <p>{property.ques_count} Multiple Choice Questions</p>\n        </div>\n        <div className='dots' onClick={viewMoreHandler}>\n          <i className='fa fa-ellipsis-h'>\n            <span className='sr-only'>Click to view result</span>\n          </i>\n          {viewMoreBtn}\n        </div>\n      </div>\n      <div className='board-settings'>\n        <p className='exam-id' onClick={copyValueHandler}>\n          Exam id: <span>{props.examID}</span>\n        </p>\n\n        <div className='board-settings-right'>\n          <button className='button edit'>\n            <i className='fa fa-edit'></i>\n            <span>Edit</span>\n          </button>\n          <button className='button'>\n            <i className='fa fa-trash'></i>\n            <span>Delete</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n  {\n    /* single board/box ends */\n  }\n}\n\nexport default DashboardExam;\n\n/*\n<AppBar style={{ background: \"#14213D\", position: \"fixed\" }}>\n        <Toolbar></Toolbar>\n      </AppBar>\n\n      <div className='Exam-card' position='fixed'></div>\n      <div className='Exam-card' position='fixed'></div>\n\n*/\n\n/*\n1. Single Exam \n2. All the data will be parsed from the api\n*/\n","/Users/waseehaque/Codes/McqApp/makers/src/components/LoginPage.js",["92","93","94","95"],"import React, { useEffect, useState } from \"react\";\nimport \"./LoginPage.css\";\nimport Cookies from 'universal-cookie';\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { login, register } from \"./api\";\n\nimport Spinner from \"./Spinner\"\n\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {getIsLoggedIn} from './api';\n\nimport logo from './mcqappAvatar-01.png';\n\n\n\n/*\n1. Moved the input elements into a form.\n2. className='LoginPage' has 100% width & 100% height, display grid to place the form always centered.\n3. all the elements inside the form has some margin & padding.\n*/\nfunction LoginPage() {\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailCN, setEmailCN] = useState(\"id_text\");\n  const [pwCN, setPWCN] = useState(\"id_text\");\n\n  const [spinnerClassName, setSpinnerClassName] = useState(\"spinner\");\n  const [loginErrorVisibility, setLoginErrorVisibility] = useState(\"message-invisible\");\n  const [mainDivClassname, setMainDivClassname] = useState(\"LoginPage\")\n  const [errorMessage, setErrorMessage] = useState();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect( () => {\n    async function onInnitialLoad() {\n      var tempIsLoggedin = await getIsLoggedIn();\n      setIsLoggedIn(tempIsLoggedin);\n      setIsLoaded(true);\n  } onInnitialLoad();\n} , []);\n\n  let history = useHistory();\n\n  async function processLogin() {\n    //Do Some email validation\n    toggleSpinner();\n    var session_token = await login(email, password);\n    if(session_token){      \n      history.push(\n        {\n          pathname : \"/dashboard\",\n          isLoggedIn : true,\n        }\n      );\n    }\n\n    else{\n      ShowMessage(\"Username or Password is Wrong\");\n    }\n\n  }\n\n  async function processRegister() {\n\n    toggleSpinner();\n    //Do some email validation\n    var user = await register(email, password);\n    if(user.success){\n      ShowMessage(\"Successfully Registered, please login.\")\n    }\n    else{\n      ShowMessage(\"Username is taken\");\n    }\n    \n  }\n\n  function toggleSpinner(){\n    spinnerClassName=='spinner'?setSpinnerClassName('spinner-active'):setSpinnerClassName('spinner');\n    mainDivClassname=='LoginPage'?setMainDivClassname('LoginPage-blurred'):setMainDivClassname('LoginPage');\n  }\n\n  function ShowMessage(message){\n    setSpinnerClassName('spinner');\n    setMainDivClassname('LoginPage');\n\n    setErrorMessage(message);\n    setLoginErrorVisibility('message-visible');\n  }\n\n  if(!isLoggedIn && isLoaded) return (      \n    <div>\n      <div className={spinnerClassName}><Spinner/></div>\n      <div className={mainDivClassname}>\n        <form className='LoginForm'>\n          <img\n          className='LoginForm-avatar'\n          src={logo}\n          alt='Login Avatar'\n          />\n        <div className={loginErrorVisibility}>\n          {errorMessage}\n        </div>\n\n        {/* Input elements */}\n        <InputBase\n          className={emailCN}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder='Username'\n          onFocus={(e) => setEmailCN(\"id_text_selected\")}\n          onBlur={(e) => setEmailCN(\"id_text\")}\n        />\n        <InputBase\n          className={pwCN}\n          type='password'\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder='Password'\n          onFocus={(e) => setPWCN(\"id_text_selected\")}\n          onBlur={(e) => setPWCN(\"id_text\")}\n        />\n\n        <button className='button' type=\"button\" onClick={()=>{processLogin()}}>\n          Login\n        </button>\n\n        <div className='LoginForm-bar'></div>\n\n        <button className='button' type=\"button\" onClick={()=>{processRegister()}}>\n          Register\n        </button>\n      </form>\n\n    </div>\n    </div>\n  );\n  if(isLoaded && isLoggedIn){\n    history.push(\n      {\n        pathname : \"/dashboard\",\n        isLoggedIn : true,\n      }\n    );\n    return (\n      <div>\n      <Spinner className='loading'/>\n    </div>\n    );\n  }\n\n  //This else statement runs if user is logged in (authenticated via cookie)\n  else{\n    return (\n      <div>\n        <Spinner className='loading'/>\n      </div>\n      \n      \n    );\n  }\n}\n\nexport default LoginPage;\n","/Users/waseehaque/Codes/McqApp/makers/src/components/Profile.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/Settings.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/ExamView.js",["96"],"import \"./ExamView.css\";\nimport ExamArea from \"./ExamArea\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { SubmitTest, getExamID } from \"./api\";\nimport Spinner from \"./Spinner\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ADD_ID = \"ADD_ID\";\nconst ADD_CREATION_TIME = \"ADD_CREATION_TIME\";\n\nfunction ExamView() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [examID, setExamID] = useState(\"\");\n\n  var history = useHistory();\n\n  async function onInitialLoad() {\n    var id = await getExamID();\n    setExamID(id);\n    dispatch(addExamIDAction(id));\n    dispatch(addExamCreationTime(Date.now()));\n    setIsLoaded(true);\n  }\n\n  useEffect(() => onInitialLoad(), []);\n\n  const dispatch = useDispatch();\n\n  function addExamIDAction(value) {\n    return {\n      type: ADD_ID,\n      id: \"examID\",\n      value: value,\n    };\n  }\n\n  function addExamCreationTime(value) {\n    return {\n      type: ADD_CREATION_TIME,\n      id: \"creation_time\",\n      value: value,\n    };\n  }\n\n  /**\n   * Calls submittest from API.js\n   * Adds a syntheic wait to make the user thing something is actually going on.\n   */\n  async function Finished() {\n    //Show the modal\n    var submitsuccess = await SubmitTest();\n    console.log(submitsuccess, \"SubmitSucecss\");\n    if (submitsuccess) {\n      history.push(\"/dashboard\", {});\n    } else {\n    }\n  }\n\n  if (isLoaded)\n    return (\n      <div className='App'>\n        {/**Header  ***********/}\n        <header className='header'>\n          <div className='container'>\n            <div className='back_button_wrapper'>\n              <button className='back_button' onClick={() => history.goBack()}>\n                <i className='fa fa-chevron-circle-left'></i>\n                <span className='sr-only'>Go Back</span>\n              </button>\n            </div>\n            <p>\n              <i className='fa fa-book'></i>\n              <b>{\"Exam ID : \" + examID}</b>\n            </p>\n\n            {/* Settings *****************/}\n            <button className='settings_button'>\n              <i className='fa fa-cog'></i>\n              <span className='settings_button_text'>Settings</span>\n            </button>\n\n            <button onClick={() => Finished(3)} className='submit_button'>\n              <i className='fa fa-paper-plane'></i>\n              <span>Publish </span>\n            </button>\n          </div>\n        </header>\n\n        {/* Exam making area **************/}\n        <div className='exams'>\n          <div className='container'>\n            <ExamArea />\n          </div>\n        </div>\n      </div>\n    );\n  else\n    return (\n      <div className='spinner-wrapper'>\n        <Spinner />\n      </div>\n    );\n}\n\nexport default ExamView;\n\n/*\n1. Removed LeftPanel\n2. Replaced Appbar with header element\n\n\n*/\n","/Users/waseehaque/Codes/McqApp/makers/src/components/Spinner.js",[],"/Users/waseehaque/Codes/McqApp/makers/src/components/ExamArea.js",["97"],"import McqQuestion from \"./McqQuestion\";\nimport React, { useState } from \"react\";\nimport \"./ExamArea.css\";\nimport { useDispatch } from \"react-redux\";\n\n/*\nThis component generates McqQuestion components one after another, and gets them their ids. That is all.\n\nThe props to be passed:\n\nThings to do:\n1. Style out the whole thing.\n2. Add a way to record the correct answer.\n*/\n\nconst ADD_QUES_COUNT = \"ADD_QUES_COUNT\";\nconst ADD_TITLE  = 'ADD_TITLE';\n\nfunction ExamArea() {\n  const [currentQuesID, setCurrentQuesID] = useState(2);\n  const [mcqQuestionIDList, setmcqQuestionIDList] = useState([1]);\n  const [focusExamTitle, setFocusExamTitle] = useState(false);\n  const [examTitle, setExamTitle] = useState(\"Exam Title\");\n\n\n  function addAnotherQuestion() {\n    setmcqQuestionIDList(mcqQuestionIDList.concat(currentQuesID));\n    dispatch(addQuesIDAction(currentQuesID));\n    setCurrentQuesID(currentQuesID + 1);\n  }\n\n  const dispatch = useDispatch();\n\n  function addQuesIDAction(value) {\n    return {\n      type: ADD_QUES_COUNT,\n      id: \"ques_count\",\n      value: value,\n    };\n  }\n\n  function addTitleAction(value) {\n    var retval = {\n      'type': ADD_TITLE,\n      'id': 'title',\n      'value': value,\n    };\n\n    return retval;\n  }\n\n  const examTitleHandler = (e) => {\n    setExamTitle(e.target.value);\n    var value = e.target.value;\n    var action = addTitleAction(value);\n    dispatch(action);\n  };\n\n  return (\n    <div className='ExamArea'>\n      <div\n        className={\n          focusExamTitle ? \"exam-title-wrapper focused\" : \"exam-title-wrapper\"\n        }\n      >\n        <label for='exam-title'>\n          <i className='fa fa-file'></i>\n          <span>Exam Title </span>\n        </label>\n        <input\n          placeholder='Type Exam Title'\n          id='exam-title'\n          onFocus={() => setFocusExamTitle(true)}\n          onBlur={() => setFocusExamTitle(false)}\n          onChange={examTitleHandler}\n          className='exam-title'\n        />\n      </div>\n      {mcqQuestionIDList.map((idi) => (\n        <McqQuestion id={idi} key={idi} />\n      ))}\n      <button\n        onClick={() => addAnotherQuestion()}\n        className='add_another_question_button'\n      >\n        + Add Another Question\n      </button>\n    </div>\n  );\n}\n\nexport default ExamArea;\n","/Users/waseehaque/Codes/McqApp/makers/src/components/McqQuestion.js",["98","99","100","101","102"],"import \"./McqQuestion.css\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Paper, TextField, Checkbox, FormGroup } from \"@material-ui/core\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { useDispatch } from \"react-redux\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport { EditorState } from \"draft-js\";\n\nimport QuestionEditor from \"./QuestionEditor\";\n\nconst ADD_QUESTION = \"ADD_QUESTION\";\nconst ADD_ANSWER = \"ADD_ANSWER\";\n\n/*\nThis is the component that lets the maker create the question, and then stores the question to packedQuestion.\npackedQuestipn is in a format which can be directly sent to the API to be uploaded to the database.\nA basic question has question_text, question.title\n\nProps passed:\nprops.id = The Question ID.\n\nThings to Do:\n*/\n\nfunction McqQuestion(props) {\n  const [cn, setCn] = useState(\"Option-unselected\");\n  const [editorClassname, setEditorClassname] = useState(\"question-text\");\n  const [packedQuestion, setPackedQuestion] = useState({});\n  const [packedAnswer, setPackedAnswer] = useState([]);\n\n  const dispatch = useDispatch();\n\n  const [editorState, setEditorState] = React.useState(() =>\n    EditorState.createEmpty()\n  );\n\n  /**\n   * This function is the action that gets passed to the Redux store.\n   * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n   * @param {Object} ques Packed question that gets stored directy into the store, ready for use later on.\n   */\n  function addQuestionAction(quesid, ques) {\n    var retval = {\n      type: ADD_QUESTION,\n      id: quesid,\n      question: ques,\n    };\n\n    return retval;\n  }\n\n  /**\n   * This function is the action that gets passed to the Redux store.\n   * @param {String} quesid Question ID in the form ques1, ques2, ques3 and onwards. Not an integer.\n   * @param {Object} answer Packed answer that gets stored directy into the store, ready for use later on.\n   */\n  function addAnswerAction(quesid, answer) {\n    var retval = {\n      type: ADD_ANSWER,\n      id: quesid,\n      answer: answer,\n    };\n\n    return retval;\n  }\n\n  /*These two variables store a local copy of packedQuestion. These variables are first updated with the information from\n    onChange (or a variation of it), and then packedQuestion is set to an instance of this. */\n\n  let local_question_mcq = {};\n  let local_answerChoices_mcq = {};\n  var local_correct_answer = [];\n\n  /**\n   * When a new question is created, fillUpWithDefault gets called, and it fills up the Redux store with defaults for new Questions.\n   * This helps in making sure everything stored on the database is as per the schema, even if the user has left out things.\n   */\n  function fillUpWithDefault() {\n    function addOption(character, value) {\n      local_answerChoices_mcq[character] = value;\n      local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n    }\n\n    /**\n     * Function that packs Questions.\n     * @param {Boolean} title Boolean isTitle. If the value is a title set to true. If it is question_text, set to false.\n     * @param {String} value Value that would be sent to packed question.\n     */\n    function addQuestion(title, value) {\n      if (title) {\n        local_question_mcq[\"title\"] = value;\n      } else {\n        local_question_mcq[\"question_text\"] = value;\n      }\n    }\n\n    addQuestion(true, \"Question \" + props.id);\n    addQuestion(false, \"\");\n\n    addOption(\"a\", \"\");\n    addOption(\"b\", \"\");\n    addOption(\"c\", \"\");\n    addOption(\"d\", \"\");\n\n    local_question_mcq[\"title\"] = \"Question \" + props.id;\n    local_question_mcq[\"id\"] = props.id;\n\n    setPackedQuestion(local_question_mcq);\n    dispatch(addQuestionAction(\"ques\" + props.id, local_question_mcq));\n\n    //These are for the answers\n    dispatch(addAnswerAction(\"ques\" + props.id, \"\"));\n  }\n\n  useEffect(() => fillUpWithDefault(), []);\n\n  function optionOnInputFunc(character, value) {\n    local_question_mcq = { ...packedQuestion };\n    local_answerChoices_mcq = { ...local_question_mcq[\"answer_choices\"] };\n    local_answerChoices_mcq[character] = value;\n    local_question_mcq[\"answer_choices\"] = local_answerChoices_mcq;\n\n    setPackedQuestion(local_question_mcq);\n    dispatch(addQuestionAction(\"ques\" + props.id, local_question_mcq));\n  }\n\n  function titleOnInputFunc(value) {\n    local_question_mcq = { ...packedQuestion };\n    local_question_mcq[\"title\"] = value;\n    setPackedQuestion(local_question_mcq);\n  }\n\n  function questionOnInputFunc(value) {\n    setEditorState(value);\n    local_question_mcq = { ...packedQuestion };\n    local_question_mcq[\n      \"question_text\"\n    ] = value.getCurrentContent().getPlainText();\n    setPackedQuestion(local_question_mcq);\n\n    dispatch(addQuestionAction(\"ques\" + props.id, local_question_mcq));\n  }\n\n  /**Returns the checkbox\n   *\n   * @param checkBox_id The letter than corresponds to the option choice\n   */\n  function checkb(checkBox_id) {\n    return (\n      <Checkbox\n        tabIndex='-1'\n        disableRipple={true}\n        onClick={(e) => recordAnswer(checkBox_id, e)}\n        style={{ color: \"#FCA311\", outline: \"none\" }}\n        icon={<CheckBoxIcon fontSize='small' style={{ color: \"#D9D9D9\" }} />}\n        checkedIcon={<CheckBoxIcon fontSize='small' />}\n      />\n    );\n  }\n\n  function recordAnswer(checkBox_id, event) {\n    //This if statement checks if the checkbox is being checked or unchecked. We ignore if being unchecked.\n    if (event.target.checked) {\n      local_correct_answer = packedAnswer;\n      local_correct_answer.push(checkBox_id);\n      setPackedAnswer(local_correct_answer);\n      dispatch(addAnswerAction(\"ques\" + props.id, checkBox_id));\n    } else {\n      local_correct_answer = packedAnswer;\n      local_correct_answer.pop();\n      setPackedAnswer(local_correct_answer);\n      dispatch(\n        addAnswerAction(\n          \"ques\" + props.id,\n          local_correct_answer[local_correct_answer.length - 1]\n        )\n      );\n    }\n  }\n\n  //Styling functions.\n  function cngenerator(char) {\n    if (char == cn) return \"Option-selected\";\n    else return \"Option-unselected\";\n  }\n\n  function selectorcnGenerator(char) {\n    if (char == cn) return \"selector-selected\";\n    else return \"selector-unselected\";\n  }\n\n  function mcqChoiceGeneratingFunc() {\n    return (\n      <div className='Opt'>\n        <FormGroup>\n          <InputBase\n            endAdornment={checkb(\"a\")}\n            startAdornment={<b className={selectorcnGenerator(\"a\")}>a</b>}\n            onChange={(e) => optionOnInputFunc(\"a\", e.target.value)}\n            className={cngenerator(\"a\")}\n            onFocus={() => setCn(\"a\")}\n            onBlur={() => setCn(\"\")}\n            label='Option A'\n          />\n          <InputBase\n            endAdornment={checkb(\"b\")}\n            startAdornment={<b className={selectorcnGenerator(\"b\")}>b</b>}\n            onChange={(e) => optionOnInputFunc(\"b\", e.target.value)}\n            className={cngenerator(\"b\")}\n            onFocus={() => setCn(\"b\")}\n            onBlur={() => setCn(\"\")}\n            label='Option B'\n          />\n          <InputBase\n            endAdornment={checkb(\"c\")}\n            startAdornment={<b className={selectorcnGenerator(\"c\")}>c</b>}\n            onChange={(e) => optionOnInputFunc(\"c\", e.target.value)}\n            className={cngenerator(\"c\")}\n            onFocus={() => setCn(\"c\")}\n            onBlur={() => setCn(\"\")}\n            label='Option C'\n          />\n          <InputBase\n            endAdornment={checkb(\"d\")}\n            startAdornment={<b className={selectorcnGenerator(\"d\")}>d</b>}\n            onChange={(e) => optionOnInputFunc(\"d\", e.target.value)}\n            className={cngenerator(\"d\")}\n            onFocus={() => setCn(\"d\")}\n            onBlur={() => setCn(\"\")}\n            label='Option D'\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n\n  return (\n    <Paper className='Question'>\n      <form className='Question-form'>\n        <div className='Question-id'>\n          <i className='fa fa-pencil editpencil'></i>\n          <input\n            type='text'\n            className='questionedit'\n            autoComplete='off'\n            onChange={(e) => titleOnInputFunc(e.target.value)}\n            defaultValue={\"Question \" + props.id}\n            // isn't working inputProps={{ maxlength: 40 }}\n            maxLength='40'\n          />\n        </div>\n\n        <div className={editorClassname}>\n          <QuestionEditor\n            editorState={editorState}\n            onChange={questionOnInputFunc}\n            onFocus={setEditorClassname}\n            onBlur={setEditorClassname}\n          />\n        </div>\n\n        {/* What is it? */}\n        <div className='Question-error'>{/* Put dialogs or Error here */}</div>\n\n        {mcqChoiceGeneratingFunc()}\n      </form>\n    </Paper>\n  );\n}\n\nexport default McqQuestion;\n","/Users/waseehaque/Codes/McqApp/makers/src/components/QuestionEditor.js",["103","104","105","106","107","108"],"import { Paper } from '@material-ui/core';\nimport {Editor, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { useState } from 'react';\nimport React from 'react';\nimport './QuestionEditor.css'\n\n\n/**\n * Returns a question Editor, with all the necessary things.\n * \n * props.editorState\n * props.onChange\n * props.onFocus\n * props.onBlur\n */\nexport default function QuestionEditor(props){\n\n    const [toggleBold, setToggleBold] = useState(false);\n    const [toggleUnderline, setToggleUnderline] = useState(false);\n    const [toggleItalic, setToggleItalic] = useState(false);\n\n\n    function handleRichUtils(style){\n        \n        var newState;\n        switch(style){\n            case 'BOLD':\n                newState = RichUtils.toggleInlineStyle(props.editorState, 'BOLD');\n        }\n        if(newState) props.onChange(newState);\n        \n    }\n\n    function generateBlockStyle(){\n\n    }\n            \n\n    /**\n     * Function that handles command like ctrl+b to bold and ctrl+u to underline and the likes.\n     */\n    function handleKeyCommand(command, editorState){\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n\n        console.log(newState);\n\n        if (newState){\n            props.onChange(newState);\n        }\n        else {\n            console.log(\"Nothing to run that command on.\")\n        }\n\n    }\n\n    function onClickBold(e){\n        if(toggleBold){\n            e.target.className=\"inlinebutton\";\n            setToggleBold(false);\n        }\n        else{\n            e.target.className=\"inlinebutton_active\";\n            setToggleBold(true);\n        }\n        \n    }\n\n    function onClickUnderline(e){\n        if(toggleUnderline){\n            e.target.className=\"inlinebutton\";\n            setToggleUnderline(false);\n        }\n        else{\n            e.target.className=\"inlinebutton_active\";\n            setToggleUnderline(true);\n        }\n    }\n\n    function onClickItalic(e){\n        if(toggleUnderline){\n            e.target.className=\"inlinebutton\";\n            setToggleUnderline(false);\n        }\n        else{\n            e.target.className=\"inlinebutton_active\";\n            setToggleUnderline(true);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                    onFocus={() => props.onFocus(\"question-text-selected\")} \n                    onBlur={() => props.onBlur(\"question-text\")}>\n                        <div className='btns'>\n                            <span className=\"inlinebutton\" onClick={(e)=>onClickBold(e)}>Bold</span>\n                            <span className=\"inlinebutton\" onClick={(e)=>onClickUnderline(e)}>Underline</span>\n                            <span className=\"inlinebutton\" onClick={(e)=>onClickItalic(e)}>Italic</span>\n                        </div>\n                <Editor placeholder=\"Add details to your Question\"\n                handleKeyCommand={handleKeyCommand} \n                editorState={props.editorState} \n                onChange={props.onChange}>\n                </Editor>\n\n            </div>\n        </React.Fragment>\n    );\n}",{"ruleId":"109","severity":1,"message":"110","line":10,"column":8,"nodeType":"111","messageId":"112","endLine":10,"endColumn":17},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"109","severity":1,"message":"117","line":10,"column":7,"nodeType":"111","messageId":"112","endLine":10,"endColumn":19},{"ruleId":"109","severity":1,"message":"118","line":11,"column":7,"nodeType":"111","messageId":"112","endLine":11,"endColumn":17},{"ruleId":"109","severity":1,"message":"119","line":12,"column":7,"nodeType":"111","messageId":"112","endLine":12,"endColumn":16},{"ruleId":"109","severity":1,"message":"120","line":13,"column":7,"nodeType":"111","messageId":"112","endLine":13,"endColumn":13},{"ruleId":"109","severity":1,"message":"121","line":15,"column":7,"nodeType":"111","messageId":"112","endLine":15,"endColumn":21},{"ruleId":"109","severity":1,"message":"122","line":16,"column":7,"nodeType":"111","messageId":"112","endLine":16,"endColumn":24},{"ruleId":"123","severity":1,"message":"124","line":182,"column":9,"nodeType":"111","messageId":"125","endLine":182,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":205,"column":9,"nodeType":"111","messageId":"125","endLine":205,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":248,"column":7,"nodeType":"111","messageId":"128","endLine":248,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":267,"column":22,"nodeType":"131","messageId":"132","endLine":267,"endColumn":24},{"ruleId":"109","severity":1,"message":"133","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":18},{"ruleId":"109","severity":1,"message":"134","line":9,"column":20,"nodeType":"111","messageId":"112","endLine":9,"endColumn":31},{"ruleId":"135","severity":1,"message":"136","line":25,"column":7,"nodeType":"137","endLine":25,"endColumn":9,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":64,"column":3,"nodeType":"141","messageId":"142","endLine":66,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":64,"column":3,"nodeType":"141","messageId":"145","endLine":66,"endColumn":4},{"ruleId":"109","severity":1,"message":"146","line":3,"column":8,"nodeType":"111","messageId":"112","endLine":3,"endColumn":15},{"ruleId":"109","severity":1,"message":"147","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":81,"column":21,"nodeType":"131","messageId":"132","endLine":81,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":82,"column":21,"nodeType":"131","messageId":"132","endLine":82,"endColumn":23},{"ruleId":"135","severity":1,"message":"148","line":26,"column":36,"nodeType":"137","endLine":26,"endColumn":38,"suggestions":"149"},{"ruleId":"109","severity":1,"message":"150","line":23,"column":10,"nodeType":"111","messageId":"112","endLine":23,"endColumn":19},{"ruleId":"109","severity":1,"message":"151","line":2,"column":38,"nodeType":"111","messageId":"112","endLine":2,"endColumn":48},{"ruleId":"109","severity":1,"message":"152","line":3,"column":17,"nodeType":"111","messageId":"112","endLine":3,"endColumn":26},{"ruleId":"135","severity":1,"message":"153","line":115,"column":40,"nodeType":"137","endLine":115,"endColumn":42,"suggestions":"154"},{"ruleId":"129","severity":1,"message":"130","line":183,"column":14,"nodeType":"131","messageId":"132","endLine":183,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":188,"column":14,"nodeType":"131","messageId":"132","endLine":188,"endColumn":16},{"ruleId":"109","severity":1,"message":"155","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":15},{"ruleId":"109","severity":1,"message":"156","line":21,"column":12,"nodeType":"111","messageId":"112","endLine":21,"endColumn":24},{"ruleId":"109","severity":1,"message":"157","line":21,"column":26,"nodeType":"111","messageId":"112","endLine":21,"endColumn":41},{"ruleId":"109","severity":1,"message":"158","line":24,"column":14,"nodeType":"111","messageId":"112","endLine":24,"endColumn":29},{"ruleId":"159","severity":1,"message":"160","line":27,"column":9,"nodeType":"161","messageId":"162","endLine":30,"endColumn":10},{"ruleId":"109","severity":1,"message":"163","line":35,"column":14,"nodeType":"111","messageId":"112","endLine":35,"endColumn":32},"no-unused-vars","'LoginPage' is defined but never used.","Identifier","unusedVar","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"'ADD_QUESTION' is assigned a value but never used.","'ADD_ANSWER' is assigned a value but never used.","'ADD_TITLE' is assigned a value but never used.","'ADD_ID' is assigned a value but never used.","'ADD_QUES_COUNT' is assigned a value but never used.","'ADD_CREATION_TIME' is assigned a value but never used.","no-redeclare","'session_token' is already defined.","redeclared","no-use-before-define","'session_token' was used before it was defined.","usedBeforeDefined","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isLoaded' is assigned a value but never used.","'setIsLoaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.examID'. Either include it or remove the dependency array.","ArrayExpression",["166"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'Cookies' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'onInitialLoad'. Either include it or remove the dependency array.",["167"],"'examTitle' is assigned a value but never used.","'useContext' is defined but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'fillUpWithDefault'. Either include it or remove the dependency array.",["168"],"'Paper' is defined but never used.","'toggleItalic' is assigned a value but never used.","'setToggleItalic' is assigned a value but never used.","'handleRichUtils' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'generateBlockStyle' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [props.examID]",{"range":"175","text":"176"},"Update the dependencies array to be: [onInitialLoad]",{"range":"177","text":"178"},"Update the dependencies array to be: [fillUpWithDefault]",{"range":"179","text":"180"},[773,775],"[props.examID]",[736,738],"[onInitialLoad]",[3864,3866],"[fillUpWithDefault]"]